name: CI & Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: x86_64
          - os: windows-latest
            arch: x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # ARM64 builds via QEMU + Docker
      - name: Set up QEMU emulation
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64
      - name: Install QEMU binfmt handlers
        if: matrix.arch == 'arm64'
        run: docker run --rm --privileged tonistiigi/binfmt --install all
      - name: Build in ARM64 container
        if: matrix.arch == 'arm64'
        run: |
          docker run --rm --platform=linux/arm64 \
            -v ${{ github.workspace }}:/src -w /src ubuntu:22.04 bash -lc "\
              apt-get update && apt-get install -y curl clang make flex bison unzip && \
              make clean && make && \
              mkdir -p artifacts/linux_arm64 && cp libSITypes.a artifacts/linux_arm64/"
      - name: Upload ARM64 artifact
        if: matrix.arch == 'arm64'
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-linux-arm64
          path: artifacts/linux_arm64/libSITypes.a

      - name: Build & test on Linux/macOS
        if: runner.os != 'Windows' && matrix.arch == 'x86_64'
        run: |
          make clean
          make test-asan
          # libSITypes.a is generated at project root

      - name: Set up MSYS2 & MinGW (Windows)
        if: runner.os == 'Windows' && matrix.arch == 'x86_64'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            mingw-w64-x86_64-toolchain
            make
            flex
            bison
            unzip

      - name: Build on Windows
        if: runner.os == 'Windows' && matrix.arch == 'x86_64'
        shell: msys2 {0}
        run: |
          make clean
          make CC=gcc \
               CFLAGS="-std=c99 -I. -Isrc -O3 -Wall -Wextra \
                       -Wno-sign-compare -Wno-unused-parameter \
                       -Wno-missing-field-initializers" \
               LEX=flex YACC=bison
          # libSITypes.a is generated at project root

      - name: Upload library artifact
        if: matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-${{ matrix.os }}
          path: libSITypes.a

      # Package & upload public headers on Ubuntu only
      - name: Package public headers
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
        run: |
          mkdir -p header-pkg/include
          cp src/*.h header-pkg/include/
          zip -j header-pkg/libSITypes-headers.zip header-pkg/include/*.h
      - name: Upload headers artifact
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-headers
          path: header-pkg/libSITypes-headers.zip

  release:
    name: Package & Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Copy the header bundle into the packages folder
      - name: Copy header bundle
        run: |
          mkdir -p packages
          cp artifacts/libSITypes-headers/libSITypes-headers.zip packages/

      - name: Package libraries into ZIPs
        run: |
          mkdir -p packages
          for osdir in artifacts/*; do
            lib="${osdir}/libSITypes.a"
            if [ ! -f "$lib" ]; then
              echo "Skipping $osdir (no library to package)"
              continue
            fi
            os=$(basename "$osdir")
            zipfile="packages/libSITypes-${os}.zip"

            if [[ "$os" == windows-latest ]]; then
              pwsh -Command "Compress-Archive -Path '${lib}' -DestinationPath '${zipfile}'"
            else
              zip -j "${zipfile}" "${lib}"
            fi
          done

      - name: Create or update GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: packages/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
