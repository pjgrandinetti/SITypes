name: CI & Release

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build & Test (${{ matrix.label }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            label: ubuntu-latest.x64
          - os: macos-latest
            arch: x86_64
            label: macos-latest
          - os: windows-latest
            arch: x86_64
            label: windows-latest
    env:
      MAKEFLAGS: -j2
      CCACHE_BASEDIR: ${{ github.workspace }}
      CCACHE_COMPRESS: "1"
      CCACHE_MAXSIZE: "200M"

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history and tags for version detection

      # ---------- Linux ----------
      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang make flex bison unzip ccache

      # ---------- macOS ----------
      - name: Install deps (macOS)
        if: runner.os == 'macOS'
        env:
          HOMEBREW_NO_AUTO_UPDATE: "1"
          HOMEBREW_NO_INSTALL_CLEANUP: "1"
        run: |
          brew install flex bison ccache
          echo "$(brew --prefix bison)/bin" >> "$GITHUB_PATH"
          echo "$(brew --prefix flex)/bin"  >> "$GITHUB_PATH"

      # ---------- Windows ----------
      - name: Set up MSYS2 & MinGW (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          cache: true
          install: >
            mingw-w64-x86_64-toolchain
            make
            flex
            bison
            unzip
            mingw-w64-x86_64-ccache

      # ---------- Caches (speed + save minutes) ----------
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            C:\msys64\home\runneradmin\.ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('**/Makefile', 'src/**/*.c', 'src/**/*.h', 'tests/**/*.c', 'tests/**/*.h') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Cache third_party (OCTypes zips + extracted)
        uses: actions/cache@v4
        with:
          path: third_party
          key: tp-${{ runner.os }}-${{ hashFiles('SITypes/Makefile', 'Makefile', '.github/workflows/**') }}
          restore-keys: |
            tp-${{ runner.os }}-

      # ---------- Build & Test ----------
      - name: Build & test (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          set -euxo pipefail
          ccache --zero-stats || true
          make clean
          make octypes
          make test CC="ccache clang"
          make install-shared CC="ccache clang"
          ccache --show-stats || true
          # Verify libs
          test -f install/lib/libSITypes.a
          if [ "$RUNNER_OS" = "macOS" ]; then
            test -f install/lib/libSITypes.dylib
          else
            test -f install/lib/libSITypes.so
          fi

      - name: Build & test (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          ccache --zero-stats || true
          make clean
          make octypes CC="ccache gcc" \
               CFLAGS="-std=c99 -I. -Isrc -O3 -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers" \
               LEX=flex YACC=bison
          make test CC="ccache gcc" \
               CFLAGS="-std=c99 -I. -Isrc -O3 -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers" \
               LEX=flex YACC=bison
          make install-shared CC="ccache gcc" \
               CFLAGS="-std=c99 -I. -Isrc -O3 -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers" \
               LEX=flex YACC=bison
          ccache --show-stats || true
          # Verify libs
          test -f install/lib/libSITypes.a
          test -f install/lib/libSITypes.dll

      # ---------- Artifacts (keep for PRs by default) ----------
      - name: Upload library artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-${{ matrix.label }}
          path: install/lib/libSITypes.*
          compression-level: 9
          if-no-files-found: error

      # Headers only once (Ubuntu) to avoid duplication
      - name: Package public headers (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p header-pkg/include
          cp src/*.h header-pkg/include/
          zip -j header-pkg/libSITypes-headers.zip header-pkg/include/*.h
      - name: Upload headers artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-headers
          path: header-pkg/libSITypes-headers.zip
          compression-level: 9

  # Arm64 Linux only on tags to save minutes
  build-arm64:
    if: startsWith(github.ref, 'refs/tags/')
    name: Build & Test (ubuntu-latest.arm64)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history and tags for version detection

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Build & test in ARM64 container
        run: |
          set -euxo pipefail
          docker run --rm --platform=linux/arm64 \
            -v ${{ github.workspace }}:/src -w /src ubuntu:22.04 bash -lc "\
              apt-get update && apt-get install -y curl ca-certificates clang make flex bison unzip && \
              curl --version && \
              make clean && make octypes && make test CC=clang && make install-shared CC=clang && \
              test -f install/lib/libSITypes.a && test -f install/lib/libSITypes.so"

      - name: Upload ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-ubuntu-latest.arm64
          path: install/lib/libSITypes.*
          compression-level: 9
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Package & Release
    needs: [build, build-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Install zip
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Copy header bundle
        run: |
          mkdir -p packages
          cp artifacts/libSITypes-headers/libSITypes-headers.zip packages/ || true

      - name: Package libraries into ZIPs
        run: |
          set -euxo pipefail
          mkdir -p packages
          for osdir in artifacts/*; do
            [ -d "$osdir" ] || continue
            base="$(basename "$osdir")"
            platform="${base#libSITypes-}"
            [ "$platform" = "headers" ] && continue
            files=( "$osdir"/libSITypes.* )
            keep=()
            for f in "${files[@]}"; do [ -f "$f" ] && keep+=("$f"); done
            [ ${#keep[@]} -gt 0 ] || { echo "Skipping $osdir (no library files)"; continue; }
            zip -j "packages/libSITypes-${platform}.zip" "${keep[@]}"
          done
          ls -la packages/

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: packages/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
