name: CI & Release

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

jobs:
  build:
    name: Build & Test (${{ matrix.label }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            label: ubuntu-latest.x64
            compiler: clang
          - os: macos-latest
            label: macos-latest
            compiler: clang
          - os: windows-latest
            label: windows-latest
            compiler: gcc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history and tags for version detection

      # ---------- Linux deps ----------
      - name: Install dependencies on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang make flex bison unzip \
            ccache

      # ---------- macOS deps ----------
      - name: Install LLVM/build tools on macOS
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install llvm ccache flex bison
          # Help the build find Homebrew LLVM on both Intel & Apple Silicon
          echo "/opt/homebrew/opt/llvm/bin" >> "$GITHUB_PATH" || true
          echo "/usr/local/opt/llvm/bin"     >> "$GITHUB_PATH" || true
          echo "$(brew --prefix bison)/bin" >> "$GITHUB_PATH"
          echo "$(brew --prefix flex)/bin"  >> "$GITHUB_PATH"

      # ---------- Windows deps ----------
      - name: Set up MSYS2 & MinGW (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          cache: true
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-ccache
            make
            flex
            bison
            unzip

      # ---------- Build cache (ccache) ----------
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.label }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.label }}-

      # ---------- Build & test (Linux/macOS) ----------
      - name: Build & test on Linux/macOS
        if: runner.os != 'Windows'
        env:
          # Use ccache + chosen compiler
          CC: ${{ matrix.compiler == 'clang' && 'ccache clang' || 'ccache gcc' }}
        run: |
          set -euo pipefail
          # Parallelism
          CORES="$(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.logicalcpu 2>/dev/null || echo 2)"
          export MAKEFLAGS="-j${CORES}"
          make clean
          make update-deps
          make test
          make install-shared
          ls -la install/lib/

      # ---------- Build & test (Windows) ----------
      - name: Build & test on Windows (MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        env:
          CC: "ccache gcc"
          MAKEFLAGS: "-j$(nproc)"
          CFLAGS: "-Wno-unknown-pragmas"
        run: |
          set -euo pipefail
          make clean
          make update-deps CFLAGS="${CFLAGS}"
          make LEX=flex YACC="bison -y" CFLAGS="${CFLAGS}"
          make test LEX=flex YACC="bison -y" CFLAGS="${CFLAGS}"
          make install-shared LEX=flex YACC="bison -y" CFLAGS="${CFLAGS}"
          ls -la install/lib/

      - name: Upload library artifact
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-${{ matrix.label }}
          path: install/lib/*
          retention-days: 7

      # Package public headers once (Ubuntu x64)
      - name: Package public headers
        if: runner.os == 'Linux'
        run: |
          make install
          mkdir -p header-pkg
          cd install && zip -qr ../header-pkg/libSITypes-headers.zip include/

      - name: Upload headers artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-headers
          path: header-pkg/libSITypes-headers.zip
          retention-days: 7

  # Memory-sanitized tests on Linux
  asan:
    name: ASan (ubuntu-latest)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')   # <-- only run on release tags
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history and tags for version detection
      - run: |
          sudo apt-get update
          sudo apt-get install -y clang make flex bison unzip \
            ccache
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-asan-${{ github.sha }}
          restore-keys: ccache-asan-
      - run: |
          CORES="$(getconf _NPROCESSORS_ONLN || echo 2)"
          export MAKEFLAGS="-j${CORES}"
          export CC="ccache clang"
          make clean
          make update-deps
          make test-asan

  # ARM64 Linux build: still under releases only (keeps PRs fast)
  build-arm64:
    name: Build & Test (ubuntu-latest.arm64)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')   # <-- only run on release tags
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history and tags for version detection

      - name: Set up QEMU emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Install QEMU binfmt handlers
        run: docker run --rm --privileged tonistiigi/binfmt --install all

      - name: Build & test in ARM64 container
        run: |
          docker run --rm --platform=linux/arm64 \
            -v "${{ github.workspace }}:/src" -w /src ubuntu:22.04 bash -lc "\
              set -euo pipefail && \
              apt-get update && \
              apt-get install -y curl clang make flex bison unzip && \
              export MAKEFLAGS=\"-j\$(nproc)\" && \
              make clean && \
              make update-deps && \
              make test && make install-shared && \
              ls -la install/lib/"

      - name: Upload library artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-ubuntu-latest.arm64
          path: install/lib/*
          retention-days: 7

  release:
    name: Package & Release
    needs: [build, asan, build-arm64]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Copy header bundle
        run: |
          mkdir -p packages
          cp artifacts/libSITypes-headers/libSITypes-headers.zip packages/

      - name: Package libraries into ZIPs
        run: |
          set -euo pipefail
          mkdir -p packages
          for osdir in artifacts/*; do
            [ -d "$osdir" ] || continue
            case "$(basename "$osdir")" in
              libSITypes-ubuntu-latest.x64)  zipname="ubuntu-latest.x64" ;;
              libSITypes-ubuntu-latest.arm64) zipname="ubuntu-latest.arm64" ;;
              libSITypes-macos-latest)       zipname="macos-latest" ;;
              libSITypes-windows-latest)     zipname="windows-latest" ;;
              libSITypes-headers)            continue ;;
              *) zipname="$(basename "$osdir" | sed 's/^libSITypes-//')" ;;
            esac
            files=( $(find "$osdir" -maxdepth 2 -type f \( -name 'libSITypes.*' -o -name '*.a' -o -name '*.so' -o -name '*.dylib' -o -name '*.dll' \)) )
            [ ${#files[@]} -gt 0 ] || { echo "No library files in $osdir, skipping"; continue; }
            zip -j "packages/libSITypes-${zipname}.zip" "${files[@]}"
          done

      - name: Generate checksums
        run: |
          (cd packages && sha256sum *.zip > SHA256SUMS.txt)
          cat packages/SHA256SUMS.txt

      - name: Create or update GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: |
            packages/*.zip
            packages/SHA256SUMS.txt
          prerelease: ${{ contains(github.ref_name, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
