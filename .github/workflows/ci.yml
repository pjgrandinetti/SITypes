name: CI & Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build & Test (${{ matrix.label }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            label: ubuntu-latest.x64
          - os: ubuntu-latest
            arch: arm64
            label: ubuntu-latest.arm64
          - os: macos-latest
            arch: x86_64
            label: macos-latest
          - os: windows-latest
            arch: x86_64
            label: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # ARM64 builds via QEMU + Docker
      - name: Set up QEMU emulation
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64
      - name: Install QEMU binfmt handlers
        if: matrix.arch == 'arm64'
        run: docker run --rm --privileged tonistiigi/binfmt --install all
      - name: Build in ARM64 container
        if: matrix.arch == 'arm64'
        run: |
          docker run --rm --platform=linux/arm64 \
            -v ${{ github.workspace }}:/src -w /src ubuntu:22.04 bash -lc "\
              apt-get update && apt-get install -y curl clang make flex bison unzip && \
              make clean && make octypes && make install-shared"

      - name: Build & test on Linux/macOS
        if: runner.os != 'Windows' && matrix.arch == 'x86_64'
        run: |
          echo "=== Build Environment Info ==="
          echo "Runner OS: $RUNNER_OS"
          echo "PATH: $PATH"
          which clang || echo "clang not found"
          which bison || echo "bison not found" 
          which flex || echo "flex not found"
          echo "=============================="
          
          make clean
          echo "=== Starting octypes step ==="
          make octypes
          echo "=== octypes completed, checking dependencies ==="
          ls -la third_party/ || echo "third_party directory not found"
          ls -la third_party/lib/ || echo "third_party/lib directory not found"
          ls -la third_party/include/ || echo "third_party/include directory not found"
          echo "=== Starting test-asan step ==="
          make test-asan
          echo "=== Starting install-shared step ==="
          make install-shared
          
          # Verify libraries were created
          echo "=== Verifying build results ==="
          ls -la install/lib/
          test -f install/lib/libSITypes.a || (echo "Static library not found!" && exit 1)
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            test -f install/lib/libSITypes.dylib || (echo "macOS shared library not found!" && exit 1)
          else
            test -f install/lib/libSITypes.so || (echo "Linux shared library not found!" && exit 1)
          fi
          echo "All required libraries found!"
          # Both libSITypes.a and libSITypes.so/.dylib are in install/lib/

      - name: Set up MSYS2 & MinGW (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            mingw-w64-x86_64-toolchain
            make
            flex
            bison
            unzip

      - name: Build & test on Windows
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          make clean
          # Ensure OCTypes dependencies are available
          make octypes CC=gcc \
               CFLAGS="-std=c99 -I. -Isrc -O3 -Wall -Wextra \
                       -Wno-sign-compare -Wno-unused-parameter \
                       -Wno-missing-field-initializers" \
               LEX=flex YACC=bison
          make test CC=gcc \
               CFLAGS="-std=c99 -I. -Isrc -O3 -Wall -Wextra \
                       -Wno-sign-compare -Wno-unused-parameter \
                       -Wno-missing-field-initializers" \
               LEX=flex YACC=bison
          make install-shared CC=gcc \
               CFLAGS="-std=c99 -I. -Isrc -O3 -Wall -Wextra \
                       -Wno-sign-compare -Wno-unused-parameter \
                       -Wno-missing-field-initializers" \
               LEX=flex YACC=bison
          # Both libSITypes.a and libSITypes.dll are in install/lib/

      - name: Upload library artifacts (ARM64)
        if: matrix.arch == 'arm64'
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-${{ matrix.label }}
          path: |
            install/lib/libSITypes.a
            install/lib/libSITypes.*

      - name: Upload library artifacts (x86_64)
        if: matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-${{ matrix.label }}
          path: |
            install/lib/libSITypes.a
            install/lib/libSITypes.*

      # Package & upload public headers on Ubuntu only
      - name: Package public headers
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
        run: |
          mkdir -p header-pkg/include
          cp src/*.h header-pkg/include/
          zip -j header-pkg/libSITypes-headers.zip header-pkg/include/*.h
      - name: Upload headers artifact
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: libSITypes-headers
          path: header-pkg/libSITypes-headers.zip

  release:
    name: Package & Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Copy the header bundle into the packages folder
      - name: Copy header bundle
        run: |
          mkdir -p packages
          cp artifacts/libSITypes-headers/libSITypes-headers.zip packages/

      - name: Package libraries into ZIPs
        run: |
          mkdir -p packages
          
          # Debug: show what artifacts we downloaded
          echo "=== Downloaded artifacts ==="
          ls -la artifacts/
          for osdir in artifacts/*; do
            if [ -d "$osdir" ]; then
              echo "Contents of $osdir:"
              find "$osdir" -name "libSITypes.*" -o -name "*.a" -o -name "*.so" -o -name "*.dylib" -o -name "*.dll"
            fi
          done
          echo "========================="
          
          for osdir in artifacts/*; do
            if [ ! -d "$osdir" ] || [[ "$osdir" == *"-headers" ]]; then
              continue
            fi
            
            os=$(basename "$osdir")
            # Strip the libSITypes- prefix to get clean platform name
            platform=${os#libSITypes-}
            
            # Map platform labels to clean names for zip files
            case "$platform" in
              "ubuntu-latest.x64") zipname="ubuntu-latest" ;;
              "ubuntu-latest.arm64") zipname="ubuntu-latest-arm64" ;;
              "macos-latest") zipname="macos-latest" ;;
              "windows-latest") zipname="windows-latest" ;;
              *) zipname="$platform" ;;
            esac
            
            zipfile="packages/libSITypes-${zipname}.zip"

            # Find all library files and package them
            files_to_zip=()
            
            # Try different possible locations for library files
            for pattern in "${osdir}/libSITypes.*" "${osdir}/install/lib/libSITypes.*"; do
              for lib in $pattern; do
                if [ -f "$lib" ]; then
                  files_to_zip+=("$lib")
                fi
              done
            done

            if [ ${#files_to_zip[@]} -eq 0 ]; then
              echo "Skipping $osdir (no library files to package)"
              continue
            fi
            
            echo "Creating $zipfile with files: ${files_to_zip[@]}"

            if [[ "$zipname" == "windows-latest" ]]; then
              # Use PowerShell for Windows
              file_list=$(printf "'%s'," "${files_to_zip[@]}")
              file_list=${file_list%,}  # Remove trailing comma
              pwsh -Command "Compress-Archive -Path ${file_list} -DestinationPath '${zipfile}'"
            else
              # Use zip for Unix-like systems
              zip -j "${zipfile}" "${files_to_zip[@]}"
            fi
          done
          
          # Debug: show what packages were created
          echo "=== Created packages ==="
          ls -la packages/
          echo "========================="

      - name: Create or update GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: packages/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
