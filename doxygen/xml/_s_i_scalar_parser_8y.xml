<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_s_i_scalar_parser_8y" kind="file" language="C++">
    <compoundname>SIScalarParser.y</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">%{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#include<sp/>&quot;SILibrary.h&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#include<sp/>&quot;SIScalarParser.h&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>siserror(char<sp/>*s,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SIScalarRef<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringRef<sp/>scalarErrorString;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>sislex(void);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>%}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">%name-prefix=&quot;sis&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">%union<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ScalarNodeRef<sp/>a;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SIScalarRef<sp/>d;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>symbol<sp/>*s;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builtInMathFunctions<sp/>math_fn;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builtInConstantFunctions<sp/>const_fn;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>const_string;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*<sp/>declare<sp/>tokens<sp/>*/</highlight></codeline>
<codeline><highlight class="normal">%token<sp/>&lt;d&gt;<sp/>SCALAR</highlight></codeline>
<codeline><highlight class="normal">%token<sp/>&lt;math_fn&gt;<sp/>MATH_FUNC</highlight></codeline>
<codeline><highlight class="normal">%token<sp/>&lt;const_fn&gt;<sp/>CONST_FUNC</highlight></codeline>
<codeline><highlight class="normal">%token<sp/>&lt;const_string&gt;<sp/>CONST_STRING</highlight></codeline>
<codeline><highlight class="normal">%token<sp/>EOL</highlight></codeline>
<codeline><highlight class="normal">%left<sp/>&apos;=&apos;</highlight></codeline>
<codeline><highlight class="normal">%left<sp/>&apos;+&apos;<sp/>&apos;-&apos;</highlight></codeline>
<codeline><highlight class="normal">%left<sp/>&apos;*&apos;<sp/>&apos;/&apos;</highlight></codeline>
<codeline><highlight class="normal">%right<sp/>&apos;^&apos;</highlight></codeline>
<codeline><highlight class="normal">%right<sp/>&apos;!&apos;</highlight></codeline>
<codeline><highlight class="normal">%nonassoc<sp/>&apos;|&apos;<sp/>UMINUS</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">%type<sp/>&lt;a&gt;<sp/>exp<sp/>explist</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*<sp/>may<sp/>19th,<sp/>2013<sp/>removed<sp/>line<sp/>below<sp/>from<sp/>exp:<sp/>(was<sp/>after<sp/>exp<sp/>&apos;*&apos;<sp/>exp)<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">%%</highlight></codeline>
<codeline><highlight class="normal">calclist:<sp/><sp/><sp/>/*<sp/>do<sp/>nothing<sp/>*/</highlight></codeline>
<codeline><highlight class="normal">|<sp/>calclist<sp/>exp<sp/>EOL<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>ScalarNodeEvaluate($2,<sp/>&amp;scalarErrorString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(!ScalarNodeisLeaf($2))<sp/>ScalarNodeFree($2);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">exp:<sp/>exp<sp/>&apos;+&apos;<sp/>exp<sp/>{$$<sp/>=<sp/>ScalarNodeCreateInnerNode(&apos;+&apos;,$1,<sp/>$3);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>exp<sp/>&apos;-&apos;<sp/>exp<sp/>{$$<sp/>=<sp/>ScalarNodeCreateInnerNode(&apos;-&apos;,$1,<sp/>$3);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>exp<sp/>&apos;*&apos;<sp/>exp<sp/>{$$<sp/>=<sp/>ScalarNodeCreateInnerNode(&apos;*&apos;,$1,<sp/>$3);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>exp<sp/>&apos;/&apos;<sp/>exp<sp/>{$$<sp/>=<sp/>ScalarNodeCreateInnerNode(&apos;/&apos;,$1,<sp/>$3);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>exp<sp/>&apos;^&apos;<sp/>exp<sp/>{$$<sp/>=<sp/>ScalarNodeCreateInnerNode(&apos;^&apos;,$1,<sp/>$3);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>&apos;|&apos;<sp/>exp<sp/>&apos;|&apos;<sp/>{$$<sp/>=<sp/>ScalarNodeCreateInnerNode(&apos;|&apos;,$2,<sp/>NULL);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>&apos;(&apos;<sp/>exp<sp/>&apos;)&apos;<sp/>{$$<sp/>=<sp/>$2;}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>&apos;-&apos;<sp/>exp<sp/>%prec<sp/>UMINUS{$$<sp/>=<sp/>ScalarNodeCreateInnerNode(&apos;M&apos;,$2,<sp/>NULL);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>exp<sp/>&apos;!&apos;<sp/>{$$<sp/>=<sp/>ScalarNodeCreateInnerNode(&apos;!&apos;,$1,<sp/>NULL);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>SCALAR<sp/><sp/><sp/><sp/>{if($1==NULL)<sp/>{YYERROR;}<sp/>$$<sp/>=<sp/>ScalarNodeCreateNumberLeaf($1);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>MATH_FUNC<sp/>&apos;(&apos;<sp/>explist<sp/>&apos;)&apos;<sp/>{$$<sp/>=<sp/>ScalarNodeCreateMathFunction($1,$3);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>CONST_FUNC<sp/>CONST_STRING<sp/>{$$<sp/>=<sp/>ScalarNodeCreateConstantFunction($1,$2);}</highlight></codeline>
<codeline><highlight class="normal">;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">explist:<sp/>exp</highlight></codeline>
<codeline><highlight class="normal">|<sp/>exp<sp/>&apos;,&apos;<sp/>explist<sp/><sp/><sp/>{$$<sp/>=<sp/>ScalarNodeCreateInnerNode(&apos;L&apos;,$1,$3);}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">%%</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extern<sp/>int<sp/>sis_scan_string(const<sp/>char<sp/>*);</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>void<sp/>sislex_destroy(void);</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>sis_syntax_error;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SIScalarRef<sp/>SIScalarCreateWithOCString(OCStringRef<sp/>string,<sp/>OCStringRef<sp/>*errorString)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(errorString)<sp/>if(*errorString)<sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(OCStringCompare(string,kSIQuantityDimensionless,kOCCompareCaseInsensitive)<sp/>==<sp/>kOCCompareEqualTo)<sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/><sp/>mutString<sp/>=<sp/>OCStringCreateMutableCopy<sp/>(<sp/>string);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;*&quot;),<sp/>STR(&quot;•&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SIScalarCreateWithStringContainingSingleUnitFromLibrary(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(result)<sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scalarErrorString<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>check<sp/>for<sp/>and<sp/>get<sp/>the<sp/>final<sp/>conversion<sp/>unit</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>unit_multiplier<sp/>=<sp/>1.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SIUnitRef<sp/>finalUnit<sp/>=<sp/>ConversionWithDefinedUnit(mutString,<sp/>&amp;unit_multiplier,<sp/>errorString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;•&quot;),<sp/>STR(&quot;*&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;×&quot;),<sp/>STR(&quot;*&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;÷&quot;),<sp/>STR(&quot;/&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;−&quot;),<sp/>STR(&quot;-&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;\n&quot;),<sp/>STR(&quot;&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;+&quot;),<sp/>STR(&quot;+&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;μ&quot;),<sp/>STR(&quot;µ&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;γ&quot;),<sp/>STR(&quot;𝛾&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;º&quot;),<sp/>STR(&quot;°&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;h_p&quot;),<sp/>STR(&quot;h_P&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;ɣ&quot;),<sp/>STR(&quot;𝛾&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;√&quot;),<sp/>STR(&quot;sqrt&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;∛&quot;),<sp/>STR(&quot;cbrt&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;∜&quot;),<sp/>STR(&quot;qtrt&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;<sp/>&quot;),<sp/>STR(&quot;&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;)(&quot;),<sp/>STR(&quot;)*(&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;Ɑ&quot;),<sp/>STR(&quot;α&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Replace<sp/>unit<sp/>name<sp/>with<sp/>unit<sp/>symbol</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCArrayRef<sp/>sortedUnits<sp/>=<sp/>SIUnitGetUnitsSortedByNameLength();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(int64_t<sp/>index=0;index&lt;OCArrayGetCount(sortedUnits);index++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIUnitRef<sp/>unit<sp/>=<sp/>OCArrayGetValueAtIndex(sortedUnits,index);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>symbol<sp/>=<sp/>SIUnitCopySymbol(unit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>pluralName<sp/>=<sp/>SIUnitCreatePluralName(unit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(pluralName)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringFindAndReplace(mutString,<sp/>pluralName,<sp/>symbol,<sp/>OCRangeMake(0,<sp/>OCStringGetLength(mutString)),<sp/>kOCCompareCaseInsensitive);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(pluralName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>name<sp/>=<sp/>SIUnitCreateName(unit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(name)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,name,<sp/>symbol,OCRangeMake(0,OCStringGetLength(mutString)),kOCCompareCaseInsensitive);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Quick<sp/>fix<sp/>for<sp/>quartertsp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace<sp/>(mutString,STR(&quot;qtertsp&quot;),<sp/>STR(&quot;quartertsp&quot;),OCRangeMake(0,OCStringGetLength(mutString)),kOCCompareCaseInsensitive);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCArrayRef<sp/>openParentheses<sp/>=<sp/>OCStringCreateArrayWithFindResults(mutString,STR(&quot;(&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(openParentheses)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/><sp/>mutStringNew<sp/>=<sp/>OCStringCreateMutableCopy<sp/>(<sp/>mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int64_t<sp/>index<sp/>=<sp/>OCArrayGetCount(openParentheses)-1;<sp/>index&gt;=0;index--)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*range<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(openParentheses,index);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(range-&gt;location&gt;0<sp/>&amp;&amp;<sp/>range-&gt;location&lt;OCStringGetLength(mutString))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>previousCharacter<sp/>=<sp/>OCStringGetCharacterAtIndex(mutString,range-&gt;location-1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Don&apos;t<sp/>insert<sp/>asterisk<sp/>if<sp/>it&apos;s<sp/>a<sp/>string<sp/>inside<sp/>[<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>closeSquareBracket<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>skipThis<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int64_t<sp/>j=range-&gt;location-1;<sp/>j&gt;=0;j--)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>scanChar<sp/>=<sp/>OCStringGetCharacterAtIndex(mutString,j);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(scanChar==&apos;[&apos;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!closeSquareBracket)<sp/>skipThis<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(scanChar==&apos;]&apos;)<sp/>closeSquareBracket<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!skipThis<sp/>&amp;&amp;<sp/>characterIsDigitOrDecimalPoint(previousCharacter))<sp/>OCStringInsert(mutStringNew,<sp/>range-&gt;location,<sp/>STR(&quot;*&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutString<sp/>=<sp/>mutStringNew;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(openParentheses);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCArrayRef<sp/>closeParentheses<sp/>=<sp/>OCStringCreateArrayWithFindResults(mutString,STR(&quot;)&quot;),OCRangeMake(0,OCStringGetLength(mutString)),0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(closeParentheses)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/><sp/>mutStringNew<sp/>=<sp/>OCStringCreateMutableCopy<sp/>(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int64_t<sp/>index<sp/>=<sp/>OCArrayGetCount(closeParentheses)-1;<sp/>index&gt;=0;index--)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*range<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(closeParentheses,index);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(range-&gt;location&lt;OCStringGetLength(mutString)-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>nextCharacter<sp/>=<sp/>OCStringGetCharacterAtIndex(mutString,range-&gt;location+1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Don&apos;t<sp/>insert<sp/>asterisk<sp/>if<sp/>it&apos;s<sp/>a<sp/>string<sp/>inside<sp/>[<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>openSquareBracket<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>skipThis<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int64_t<sp/>j=range-&gt;location+1;<sp/>j&lt;OCStringGetLength(mutString);j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>scanChar<sp/>=<sp/>OCStringGetCharacterAtIndex(mutString,j);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(scanChar==&apos;]&apos;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!openSquareBracket)<sp/>skipThis<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(scanChar==&apos;[&apos;)<sp/>openSquareBracket<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!skipThis)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if((int)nextCharacter<sp/>!=&apos;+&apos;<sp/>&amp;&amp;<sp/>(int)nextCharacter<sp/>!=&apos;-&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(int)nextCharacter<sp/>!=&apos;*&apos;<sp/>&amp;&amp;<sp/>(int)nextCharacter<sp/>!=&apos;/&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(int)nextCharacter<sp/>!=&apos;^&apos;<sp/><sp/>&amp;&amp;<sp/>(int)nextCharacter<sp/>!=&apos;)&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(int)nextCharacter<sp/>!=8226)<sp/>OCStringInsert(mutStringNew,<sp/>range-&gt;location+1,<sp/>STR(&quot;*&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutString<sp/>=<sp/>mutStringNew;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(closeParentheses);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Ready<sp/>to<sp/>Parse</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sis_syntax_error<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*cString<sp/>=<sp/>OCStringGetCString(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(cString)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sis_scan_string(cString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sisparse();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sislex_destroy();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(errorString)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(scalarErrorString)<sp/>*errorString<sp/>=<sp/>scalarErrorString;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(*errorString)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(result)<sp/>OCRelease(result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(finalUnit)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!SIScalarConvertToUnit(<sp/>(SIMutableScalarRef)<sp/>result,<sp/>finalUnit,<sp/>errorString))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(SIScalarIsReal(result))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIScalarRef<sp/>realResult<sp/>=<sp/>SIScalarCreateByTakingComplexPart(result,kSIRealPart);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>realResult;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(errorString)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*errorString<sp/>=<sp/>STR(&quot;Syntax<sp/>Error&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>siserror(char<sp/>*s,<sp/>...)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scalarErrorString<sp/>=<sp/>STR(&quot;Syntax<sp/>Error&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sis_syntax_error<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="SIScalarParser.y"/>
  </compounddef>
</doxygen>
