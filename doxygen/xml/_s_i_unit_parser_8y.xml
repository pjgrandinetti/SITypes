<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_s_i_unit_parser_8y" kind="file" language="C++">
    <compoundname>SIUnitParser.y</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">%{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#include<sp/>&quot;SILibrary.h&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>yyerror(char<sp/>*s,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>SIUnitRef<sp/>final_unit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringRef<sp/>unitError;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>*unit_multiplier_ref;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>siulex(void);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>%}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">%name-prefix=&quot;siu&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">%union<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SIUnitRef<sp/>unit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/>iVal;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">%token<sp/>&lt;unit&gt;<sp/>UNIT</highlight></codeline>
<codeline><highlight class="normal">%token<sp/>&lt;iVal&gt;<sp/>INTEGER</highlight></codeline>
<codeline><highlight class="normal">%type<sp/>&lt;unit&gt;<sp/>exp<sp/>calclist</highlight></codeline>
<codeline><highlight class="normal">%left<sp/>&apos;*&apos;<sp/>&apos;/&apos;</highlight></codeline>
<codeline><highlight class="normal">%left<sp/>&apos;^&apos;</highlight></codeline>
<codeline><highlight class="normal">%%</highlight></codeline>
<codeline><highlight class="normal">calclist:<sp/>/*<sp/>do<sp/>nothing<sp/>*/<sp/>{<sp/>$$<sp/>=<sp/>NULL;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>calclist<sp/>exp<sp/>{final_unit<sp/>=<sp/>$2;}</highlight></codeline>
<codeline><highlight class="normal">;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">exp:<sp/>&apos;(&apos;<sp/>exp<sp/>&apos;)&apos;<sp/>{$$<sp/>=<sp/>$2;}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>exp<sp/>&apos;*&apos;<sp/>exp<sp/>{$$<sp/>=<sp/>SIUnitByMultiplyingWithoutReducing($1,$3,unit_multiplier_ref,<sp/>&amp;unitError);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>exp<sp/>&apos;/&apos;<sp/>exp<sp/>{$$<sp/>=<sp/>SIUnitByDividingWithoutReducing($1,$3,unit_multiplier_ref);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>exp<sp/>&apos;^&apos;<sp/>INTEGER<sp/>{$$<sp/>=<sp/>SIUnitByRaisingToAPowerWithoutReducing($1,$3,unit_multiplier_ref,<sp/>&amp;unitError);}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>INTEGER<sp/>&apos;/&apos;<sp/>exp<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if($1<sp/>==<sp/>1)<sp/>{$$<sp/>=<sp/>SIUnitByRaisingToAPowerWithoutReducing($3,-1,unit_multiplier_ref,<sp/>&amp;unitError);}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unitError<sp/>=<sp/>STR(&quot;Unknown<sp/>unit<sp/>symbol&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yyerror(&quot;Unknown<sp/>unit<sp/>symbol&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">|<sp/>UNIT</highlight></codeline>
<codeline><highlight class="normal">;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">%%</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">extern<sp/>int<sp/>siu_scan_string(const<sp/>char<sp/>*);</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>void<sp/>siulex_destroy(void);</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>siu_syntax_error;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SIUnitRef<sp/>SIUnitForParsedSymbol(OCStringRef<sp/>string,<sp/>double<sp/>*unit_multiplier,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(error)<sp/>if(*error)<sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/><sp/>mutString<sp/>=<sp/>OCStringCreateMutableCopy(string);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringTrimWhitespace<sp/>(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(OCStringGetLength(string)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>(OCStringCompare(string,STR(&quot;1&quot;),0)<sp/>==<sp/>kOCCompareEqualTo)<sp/>||(OCStringCompare(string,STR(&quot;<sp/>&quot;),0)<sp/>==<sp/>kOCCompareEqualTo)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SIUnitDimensionlessAndUnderived();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2(mutString,STR(&quot;â€¢&quot;),STR(&quot;*&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>final_unit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unitError<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unit_multiplier_ref<sp/>=<sp/>unit_multiplier;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>siu_syntax_error<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>length<sp/>=<sp/>OCStringGetLength(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(length)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*cString<sp/>=<sp/>OCStringGetCString(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>siu_scan_string(cString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>siuparse();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>siulex_destroy();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(unitError)<sp/>*error<sp/>=<sp/>unitError;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>final_unit;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>yyerror(char<sp/>*s,<sp/>...)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>&quot;error:<sp/>%s\n&quot;,s);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>siu_syntax_error<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="SIUnitParser.y"/>
  </compounddef>
</doxygen>
