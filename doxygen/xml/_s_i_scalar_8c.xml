<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_s_i_scalar_8c" kind="file" language="C++">
    <compoundname>SIScalar.c</compoundname>
    <includes refid="_s_i_library_8h" local="yes">SILibrary.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="5">
        <label>SIDimensionality.h</label>
        <link refid="_s_i_dimensionality_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>SIDimensionalityParser.h</label>
        <link refid="_s_i_dimensionality_parser_8h_source"/>
      </node>
      <node id="2">
        <label>SILibrary.h</label>
        <link refid="_s_i_library_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>SIQuantity.h</label>
        <link refid="_s_i_quantity_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>SIScalar.c</label>
        <link refid="_s_i_scalar_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>SIScalar.h</label>
        <link refid="_s_i_scalar_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>SIScalarConstants.h</label>
        <link refid="_s_i_scalar_constants_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SIUnit.h</label>
        <link refid="_s_i_unit_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SIUnitParser.h</label>
        <link refid="_s_i_unit_parser_8h_source"/>
      </node>
      <node id="4">
        <label>OCTypes/OCLibrary.h</label>
      </node>
      <node id="15">
        <label>math.h</label>
      </node>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="14">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_____s_i_scalar" prot="public">__SIScalar</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="_s_i_scalar_8c_1a6e5c19fa93fe9431025f0ae06e731992" prot="public" static="yes" mutable="no">
        <type>OCTypeID</type>
        <definition>OCTypeID kSIScalarID</definition>
        <argsstring></argsstring>
        <name>kSIScalarID</name>
        <initializer>= _kOCNotATypeID</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="14" column="17" bodyfile="SIScalar.c" bodystart="14" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_s_i_scalar_8c_1a5f6d10ed6cd553e32c54c9159d799688" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool __SIScalarEqual</definition>
        <argsstring>(const void *theType1, const void *theType2)</argsstring>
        <name>__SIScalarEqual</name>
        <param>
          <type>const void *</type>
          <declname>theType1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>theType2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="26" column="13" bodyfile="SIScalar.c" bodystart="26" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aa181fed9712767aa1c8f7fc3ee6ef517" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void __SIScalarFinalize</definition>
        <argsstring>(const void *theType)</argsstring>
        <name>__SIScalarFinalize</name>
        <param>
          <type>const void *</type>
          <declname>theType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="58" column="13" bodyfile="SIScalar.c" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a4dc722dea47520ee32bba305dc87953e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCStringRef</type>
        <definition>static OCStringRef __SIScalarCopyFormattingDescription</definition>
        <argsstring>(OCTypeRef theType)</argsstring>
        <name>__SIScalarCopyFormattingDescription</name>
        <param>
          <type>OCTypeRef</type>
          <declname>theType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="65" column="20" bodyfile="SIScalar.c" bodystart="65" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ae73ca7ef4537227256f6ee2ae9a6aee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCTypeID</type>
        <definition>OCTypeID SIScalarGetTypeID</definition>
        <argsstring>(void)</argsstring>
        <name>SIScalarGetTypeID</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the type ID for SIScalar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The type ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="88" column="10" bodyfile="SIScalar.c" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a22df61e734b7d93b2b7c88590cd7bb11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="struct_____s_i_scalar" kindref="compound">__SIScalar</ref> *</type>
        <definition>static struct __SIScalar * SIScalarAllocate</definition>
        <argsstring>()</argsstring>
        <name>SIScalarAllocate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="94" column="24" bodyfile="SIScalar.c" bodystart="94" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aef3a72f4f1f76a338959694887255736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreate</definition>
        <argsstring>(SIUnitRef unit, numberType type, void *value)</argsstring>
        <name>SIScalarCreate</name>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <param>
          <type>numberType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="110" column="13" bodyfile="SIScalar.c" bodystart="110" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a3870c108ae2ff9de41de1939695e14b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
        <definition>static SIMutableScalarRef SIScalarCreateMutable</definition>
        <argsstring>(SIUnitRef unit, numberType elementType, void *value)</argsstring>
        <name>SIScalarCreateMutable</name>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <param>
          <type>numberType</type>
          <declname>elementType</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="146" column="27" bodyfile="SIScalar.c" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1af6ad9941f221e08b720cf78d258469ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateCopy</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarCreateCopy</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Creates a copy of a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="157" column="13" bodyfile="SIScalar.c" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a5a4eae72c05f0cd99d3f28e4a8e362ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
        <definition>SIMutableScalarRef SIScalarCreateMutableCopy</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarCreateMutableCopy</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Creates a mutable copy of a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A mutable copy of the scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="163" column="20" bodyfile="SIScalar.c" bodystart="163" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ae51f925cba2fa406727411c6f9333c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateWithFloat</definition>
        <argsstring>(float input_value, SIUnitRef unit)</argsstring>
        <name>SIScalarCreateWithFloat</name>
        <param>
          <type>float</type>
          <declname>input_value</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Creates a scalar from float value and unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The float value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="189" column="13" bodyfile="SIScalar.c" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a45e2f5d6f6dea3e55bf20c5ad61442b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
        <definition>SIMutableScalarRef SIScalarCreateMutableWithFloat</definition>
        <argsstring>(float input_value, SIUnitRef unit)</argsstring>
        <name>SIScalarCreateMutableWithFloat</name>
        <param>
          <type>float</type>
          <declname>input_value</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Creates a mutable scalar from float value and unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The float value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIMutableScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="194" column="20" bodyfile="SIScalar.c" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a2371d11d3cb75ffaab47817ccda03d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateWithDouble</definition>
        <argsstring>(double input_value, SIUnitRef unit)</argsstring>
        <name>SIScalarCreateWithDouble</name>
        <param>
          <type>double</type>
          <declname>input_value</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Creates a scalar from double value and unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="199" column="13" bodyfile="SIScalar.c" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a687b82fc021bf7b637cf62affb5931bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
        <definition>SIMutableScalarRef SIScalarCreateMutableWithDouble</definition>
        <argsstring>(double input_value, SIUnitRef unit)</argsstring>
        <name>SIScalarCreateMutableWithDouble</name>
        <param>
          <type>double</type>
          <declname>input_value</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Creates a mutable scalar from double value and unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIMutableScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="204" column="20" bodyfile="SIScalar.c" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aed59f1dfb9a2fa1c5df27082f816595a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateWithFloatComplex</definition>
        <argsstring>(float _Complex input_value, SIUnitRef unit)</argsstring>
        <name>SIScalarCreateWithFloatComplex</name>
        <param>
          <type>float _Complex</type>
          <declname>input_value</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Creates a scalar from float complex value and unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The float complex value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="209" column="13" bodyfile="SIScalar.c" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1af8f30169fd64ac27af25a9f77a396ca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
        <definition>SIMutableScalarRef SIScalarCreateMutableWithFloatComplex</definition>
        <argsstring>(float _Complex input_value, SIUnitRef unit)</argsstring>
        <name>SIScalarCreateMutableWithFloatComplex</name>
        <param>
          <type>float _Complex</type>
          <declname>input_value</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Creates a mutable scalar from float complex value and unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The float complex value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIMutableScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="214" column="20" bodyfile="SIScalar.c" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a2f2aebbf0c3110cdec18654e6cb174fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateWithDoubleComplex</definition>
        <argsstring>(double _Complex input_value, SIUnitRef unit)</argsstring>
        <name>SIScalarCreateWithDoubleComplex</name>
        <param>
          <type>double _Complex</type>
          <declname>input_value</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Creates a scalar from double complex value and unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The double complex value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="219" column="13" bodyfile="SIScalar.c" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a824aa42d425169ea96d4197f87dca776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
        <definition>SIMutableScalarRef SIScalarCreateMutableWithDoubleComplex</definition>
        <argsstring>(double _Complex input_value, SIUnitRef unit)</argsstring>
        <name>SIScalarCreateMutableWithDoubleComplex</name>
        <param>
          <type>double _Complex</type>
          <declname>input_value</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Creates a mutable scalar from double complex value and unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The double complex value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIMutableScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="224" column="20" bodyfile="SIScalar.c" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a1f82a304e43c692d7cd6e838d58ca065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SIScalarSetElementType</definition>
        <argsstring>(SIMutableScalarRef theScalar, numberType elementType)</argsstring>
        <name>SIScalarSetElementType</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>numberType</type>
          <declname>elementType</declname>
        </param>
        <briefdescription>
<para>Sets the element type of a mutable scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementType</parametername>
</parameternamelist>
<parameterdescription>
<para>The element type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="231" column="6" bodyfile="SIScalar.c" bodystart="231" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1acb83c99dcbadf14906601e2ac6d16ab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="union_____s_i_number" kindref="compound">__SINumber</ref></type>
        <definition>__SINumber SIScalarGetValue</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarGetValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Gets the value of a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="316" column="12" bodyfile="SIScalar.c" bodystart="316" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aee93f8a43574ca584073e24185b4ef3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SIScalarSetFloatValue</definition>
        <argsstring>(SIMutableScalarRef theScalar, float value)</argsstring>
        <name>SIScalarSetFloatValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the float value of a mutable scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The float value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="321" column="6" bodyfile="SIScalar.c" bodystart="321" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a2c82abbde15f38a49f84d72bb0105d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SIScalarSetDoubleValue</definition>
        <argsstring>(SIMutableScalarRef theScalar, double value)</argsstring>
        <name>SIScalarSetDoubleValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the double value of a mutable scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The double value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="327" column="6" bodyfile="SIScalar.c" bodystart="327" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a37709d874b4f8935a428d13e8c772a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SIScalarSetFloatComplexValue</definition>
        <argsstring>(SIMutableScalarRef theScalar, float _Complex value)</argsstring>
        <name>SIScalarSetFloatComplexValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>float _Complex</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the float complex value of a mutable scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The float complex value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="333" column="6" bodyfile="SIScalar.c" bodystart="333" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a697d8dc166fd17e955ec42ea2f18332d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SIScalarSetDoubleComplexValue</definition>
        <argsstring>(SIMutableScalarRef theScalar, double _Complex value)</argsstring>
        <name>SIScalarSetDoubleComplexValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>double _Complex</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the double complex value of a mutable scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The double complex value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="339" column="6" bodyfile="SIScalar.c" bodystart="339" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1afd86f58aa4ac3338cebf0b5381fb8e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float SIScalarFloatValue</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarFloatValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Returns a float value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A float value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="346" column="7" bodyfile="SIScalar.c" bodystart="346" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aef133da263cd2e705deb20078f7db309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SIScalarDoubleValue</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarDoubleValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Returns a double value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="362" column="8" bodyfile="SIScalar.c" bodystart="362" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1adac3474927153359307977461f1968c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float _Complex</type>
        <definition>float _Complex SIScalarFloatComplexValue</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarFloatComplexValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Returns a float complex value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A float complex value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="378" column="16" bodyfile="SIScalar.c" bodystart="378" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a4a72448bde735398fe52b1b41bfe9357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double _Complex</type>
        <definition>double _Complex SIScalarDoubleComplexValue</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarDoubleComplexValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Returns a double complex value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double complex value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="394" column="17" bodyfile="SIScalar.c" bodystart="394" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ae18f03fc24864a424e5b85b63b37400b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SIScalarMagnitudeValue</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarMagnitudeValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Calculates and returns magnitude. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="410" column="8" bodyfile="SIScalar.c" bodystart="410" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a8beeac762a9466e5c81959feed0b51c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SIScalarArgumentValue</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarArgumentValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Returns the argument value of scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The argument. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="417" column="8" bodyfile="SIScalar.c" bodystart="417" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a26066eae739cb00d411f8db68ea24009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float SIScalarFloatValueInCoherentUnit</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarFloatValueInCoherentUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Calculates and returns float value after converting to its coherent SI unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A float value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="424" column="7" bodyfile="SIScalar.c" bodystart="424" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a96a0168dab04f04cde0369eee709d2c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SIScalarDoubleValueInCoherentUnit</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarDoubleValueInCoherentUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Calculates and returns double value after converting to its coherent SI unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="446" column="8" bodyfile="SIScalar.c" bodystart="446" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aef06532677e4ef24bec545f21ae69e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float _Complex</type>
        <definition>float _Complex SIScalarFloatComplexValueInCoherentUnit</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarFloatComplexValueInCoherentUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Calculates and returns float complex value after converting to its coherent SI unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A float complex value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="468" column="16" bodyfile="SIScalar.c" bodystart="468" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aa956a5675cc052badc3d98d31ef652df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double _Complex</type>
        <definition>double _Complex SIScalarDoubleComplexValueInCoherentUnit</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarDoubleComplexValueInCoherentUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Calculates and returns double complex value after converting to its coherent SI unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double complex value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="490" column="17" bodyfile="SIScalar.c" bodystart="490" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a09dfb1b3a8c488c64e38f7d04b83c138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float SIScalarFloatValueInUnit</definition>
        <argsstring>(SIScalarRef theScalar, SIUnitRef unit, bool *success)</argsstring>
        <name>SIScalarFloatValueInUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>Calculates and returns float value after converting to unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>success</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to boolean that returns true if operation was successful. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A float value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="512" column="7" bodyfile="SIScalar.c" bodystart="512" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a15e42e708d9530fe3691ab8bb4f807b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SIScalarDoubleValueInUnit</definition>
        <argsstring>(SIScalarRef theScalar, SIUnitRef unit, bool *success)</argsstring>
        <name>SIScalarDoubleValueInUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>Calculates and returns double value after converting to unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>success</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to boolean that returns true if operation was successful. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="536" column="8" bodyfile="SIScalar.c" bodystart="536" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a08973dd70fd31016cd096132e40607f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float _Complex</type>
        <definition>float _Complex SIScalarFloatComplexValueInUnit</definition>
        <argsstring>(SIScalarRef theScalar, SIUnitRef unit, bool *success)</argsstring>
        <name>SIScalarFloatComplexValueInUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>Calculates and returns float complex value after converting to unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>success</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to boolean that returns true if operation was successful. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A float complex value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="560" column="16" bodyfile="SIScalar.c" bodystart="560" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a25ee1924e146f0d2e149c62876d68984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double _Complex</type>
        <definition>double _Complex SIScalarDoubleComplexValueInUnit</definition>
        <argsstring>(SIScalarRef theScalar, SIUnitRef unit, bool *success)</argsstring>
        <name>SIScalarDoubleComplexValueInUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>Calculates and returns double complex value after converting to unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>success</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to boolean that returns true if operation was successful. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A double complex value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="584" column="17" bodyfile="SIScalar.c" bodystart="584" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ab52ef39219c2374d068d1ff6126b0c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByConvertingToNumberType</definition>
        <argsstring>(SIScalarRef theScalar, numberType elementType)</argsstring>
        <name>SIScalarCreateByConvertingToNumberType</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>numberType</type>
          <declname>elementType</declname>
        </param>
        <briefdescription>
<para>Creates a copy of a scalar as elementType. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementType</parametername>
</parameternamelist>
<parameterdescription>
<para>The element type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the scalar.</para>
</simplesect>
Note that down conversion from double to float loses precision and down conversion from complex to real loses the imaginary part of the quantity. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="613" column="13" bodyfile="SIScalar.c" bodystart="613" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a72be073d1d7d847db53326244e4c7db7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarTakeComplexPart</definition>
        <argsstring>(SIMutableScalarRef theScalar, complexPart part)</argsstring>
        <name>SIScalarTakeComplexPart</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528" kindref="member">complexPart</ref></type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Takes the complex number part of a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>The complex number part. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successful, false otherwise.</para>
</simplesect>
Complex number parts are kSIRealPart, kSIImaginaryPart, kSIMagnitudePart, and kSIArgumentPart. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="621" column="6" bodyfile="SIScalar.c" bodystart="621" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aa84b2b2d1077869403ad6206c7542c77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByTakingComplexPart</definition>
        <argsstring>(SIScalarRef theScalar, complexPart part)</argsstring>
        <name>SIScalarCreateByTakingComplexPart</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528" kindref="member">complexPart</ref></type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Creates a scalar from complex number part. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>The complex number part. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object.</para>
</simplesect>
Complex number parts are kSIRealPart, kSIImaginaryPart, kSIMagnitudePart, and kSIArgumentPart. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="701" column="13" bodyfile="SIScalar.c" bodystart="701" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a3677eb2468ac84a15844cd25151399c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarReduceUnit</definition>
        <argsstring>(SIMutableScalarRef theScalar)</argsstring>
        <name>SIScalarReduceUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Reduces the unit&apos;s numerator and denominator exponents to their lowest integer values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The input scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="710" column="6" bodyfile="SIScalar.c" bodystart="710" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1abac2ae228535f3d26163282e0b65ba81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByReducingUnit</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarCreateByReducingUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by reducing its unit to the numerator and denominator exponents to their lowest integer values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The input scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="750" column="13" bodyfile="SIScalar.c" bodystart="750" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a5b786161f6d7945b49265a2044cf4687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarConvertToUnit</definition>
        <argsstring>(SIMutableScalarRef theScalar, SIUnitRef unit, OCStringRef *error)</argsstring>
        <name>SIScalarConvertToUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Converts a scalar to another unit of the same dimensionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The input scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="759" column="6" bodyfile="SIScalar.c" bodystart="759" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1accae31270079adac1d12c1f1176cac74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByConvertingToUnit</definition>
        <argsstring>(SIScalarRef theScalar, SIUnitRef unit, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByConvertingToUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref></type>
          <declname>unit</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by converting to another unit of the same dimensionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The input scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new unit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if conversion cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="801" column="13" bodyfile="SIScalar.c" bodystart="801" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a48d501564d32aa25564096a01d71442f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarConvertToCoherentUnit</definition>
        <argsstring>(SIMutableScalarRef theScalar, OCStringRef *error)</argsstring>
        <name>SIScalarConvertToCoherentUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Converts a scalar to a coherent SI unit of the same dimensionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The input scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="811" column="6" bodyfile="SIScalar.c" bodystart="811" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ae1afd60d765f3527f3e23ce056090855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByConvertingToCoherentUnit</definition>
        <argsstring>(SIScalarRef theScalar, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByConvertingToCoherentUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by converting to a coherent SI unit of the same dimensionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The input scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if conversion cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="819" column="13" bodyfile="SIScalar.c" bodystart="819" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ae6d91e81850d1f4a8d22b66ae3332765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarBestConversionForQuantity</definition>
        <argsstring>(SIMutableScalarRef theScalar, OCStringRef quantity, OCStringRef *error)</argsstring>
        <name>SIScalarBestConversionForQuantity</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef</type>
          <declname>quantity</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="829" column="6" bodyfile="SIScalar.c" bodystart="829" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aba05d6673cc9e3297badeecfcff311ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarAdd</definition>
        <argsstring>(SIMutableScalarRef target, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarAdd</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Adds a scalar of the same dimensionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="868" column="6" bodyfile="SIScalar.c" bodystart="868" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a60819e4dc3b1446d560a67e44102b261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByAdding</definition>
        <argsstring>(SIScalarRef input1, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByAdding</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input1</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by adding two scalars of the same dimensionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="975" column="13" bodyfile="SIScalar.c" bodystart="975" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1af86021ed84856607473dceabffb5bc49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarSubtract</definition>
        <argsstring>(SIMutableScalarRef target, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarSubtract</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Subtracts a scalar of the same dimensionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to be subtracted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="986" column="6" bodyfile="SIScalar.c" bodystart="986" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a0fc57dfa64cf9ec1b97e523964d62d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateBySubtracting</definition>
        <argsstring>(SIScalarRef input1, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarCreateBySubtracting</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input1</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by subtracting two scalars of the same dimensionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input1</parametername>
</parameternamelist>
<parameterdescription>
<para>The subtracted scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The subtracting scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1093" column="13" bodyfile="SIScalar.c" bodystart="1093" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a351aaadedc33399a02e239abe9090b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarMultiplyWithoutReducingUnit</definition>
        <argsstring>(SIMutableScalarRef target, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarMultiplyWithoutReducingUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Multiplies by a scalar without reducing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to be multiplied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1104" column="6" bodyfile="SIScalar.c" bodystart="1104" bodyend="1201"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ac5ebd466101d33c39529032e8166be61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByMultiplyingWithoutReducingUnit</definition>
        <argsstring>(SIScalarRef input1, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByMultiplyingWithoutReducingUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input1</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by multiplying two scalars without reducing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1203" column="13" bodyfile="SIScalar.c" bodystart="1203" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1acf385da2dd8cd404fe0ec612dd1883d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarMultiply</definition>
        <argsstring>(SIMutableScalarRef target, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarMultiply</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Multiplies by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to be multiplied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1213" column="6" bodyfile="SIScalar.c" bodystart="1213" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a5383911a73021f9c8c7d6194c102d6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByMultiplying</definition>
        <argsstring>(SIScalarRef input1, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByMultiplying</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input1</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by multiplying two scalars. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1312" column="13" bodyfile="SIScalar.c" bodystart="1312" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a191f41282c2325d4f6fe546fd21c72b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarDivideWithoutReducingUnit</definition>
        <argsstring>(SIMutableScalarRef target, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarDivideWithoutReducingUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Divides by a scalar without reducing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to be divided by. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1322" column="6" bodyfile="SIScalar.c" bodystart="1322" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a7e783c56f337e132d2619d3a39d74214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarDivide</definition>
        <argsstring>(SIMutableScalarRef target, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarDivide</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Divides by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to be divided by. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1441" column="6" bodyfile="SIScalar.c" bodystart="1441" bodyend="1563"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a10524a64224b828383921a8242143f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByDividingWithoutReducingUnit</definition>
        <argsstring>(SIScalarRef input1, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByDividingWithoutReducingUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input1</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by dividing two scalars without reducing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input1</parametername>
</parameternamelist>
<parameterdescription>
<para>The numerator scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The denominator scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1565" column="13" bodyfile="SIScalar.c" bodystart="1565" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ab0b7351461dcc0ff7ad993dfdb931f32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByDividing</definition>
        <argsstring>(SIScalarRef input1, SIScalarRef input2, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByDividing</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input1</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by dividing two scalars. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input1</parametername>
</parameternamelist>
<parameterdescription>
<para>The numerator scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The denominator scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1576" column="13" bodyfile="SIScalar.c" bodystart="1576" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a0b1bc4c9406666f375e344859e9fb491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarRaiseToAPowerWithoutReducingUnit</definition>
        <argsstring>(SIMutableScalarRef theScalar, double power, OCStringRef *error)</argsstring>
        <name>SIScalarRaiseToAPowerWithoutReducingUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Raises a scalar to an integer power without reducing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer power. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1587" column="6" bodyfile="SIScalar.c" bodystart="1587" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a325f89b6d438e8ba3c4e94abf9f6026d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByRaisingToAPowerWithoutReducingUnit</definition>
        <argsstring>(SIScalarRef theScalar, double power, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByRaisingToAPowerWithoutReducingUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by raising to an integer power without reducing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer power. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1617" column="13" bodyfile="SIScalar.c" bodystart="1617" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aad38100b32c7aa4fa64e37275a05ee59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarRaiseToAPower</definition>
        <argsstring>(SIMutableScalarRef theScalar, double power, OCStringRef *error)</argsstring>
        <name>SIScalarRaiseToAPower</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Raises a scalar to an integer power. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer power. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1628" column="6" bodyfile="SIScalar.c" bodystart="1628" bodyend="1659"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a2eec1e13d0a6d0d53760ef6472bd11d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByRaisingToAPower</definition>
        <argsstring>(SIScalarRef theScalar, double power, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByRaisingToAPower</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by raising to an integer power. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer power. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1661" column="13" bodyfile="SIScalar.c" bodystart="1661" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aac11e962df7fb17aa14ba7caf7668185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarTakeAbsoluteValue</definition>
        <argsstring>(SIMutableScalarRef theScalar, OCStringRef *error)</argsstring>
        <name>SIScalarTakeAbsoluteValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Takes absolute values of a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1671" column="6" bodyfile="SIScalar.c" bodystart="1671" bodyend="1691"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aa89d55a244d3c180427f58774dda6cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByTakingAbsoluteValue</definition>
        <argsstring>(SIScalarRef theScalar, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByTakingAbsoluteValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by taking absolute values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1693" column="13" bodyfile="SIScalar.c" bodystart="1693" bodyend="1701"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a74576e95b0c04077b9c5f46ddf31d684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByGammaFunctionWithoutReducingUnit</definition>
        <argsstring>(SIScalarRef theScalar, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByGammaFunctionWithoutReducingUnit</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar with Gamma function without reducing unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1703" column="13" bodyfile="SIScalar.c" bodystart="1703" bodyend="1730"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ab73c0766cd0fbd00f0a8db08ca65d878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarMultiplyByDimensionlessRealConstant</definition>
        <argsstring>(SIMutableScalarRef theScalar, double constant)</argsstring>
        <name>SIScalarMultiplyByDimensionlessRealConstant</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>double</type>
          <declname>constant</declname>
        </param>
        <briefdescription>
<para>Multiplies a scalar by a dimensionless real constant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constant</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensionless constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1732" column="6" bodyfile="SIScalar.c" bodystart="1732" bodyend="1750"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a1d47a6ec624ebf9f6aa9c1b725ae9467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByMultiplyingByDimensionlessRealConstant</definition>
        <argsstring>(SIScalarRef theScalar, double constant)</argsstring>
        <name>SIScalarCreateByMultiplyingByDimensionlessRealConstant</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>double</type>
          <declname>constant</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by multiplying by a dimensionless real constant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constant</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensionless real constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1752" column="13" bodyfile="SIScalar.c" bodystart="1752" bodyend="1761"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a4f64b199974397daed9f9077f13faec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarMultiplyByDimensionlessComplexConstant</definition>
        <argsstring>(SIMutableScalarRef theScalar, double _Complex constant)</argsstring>
        <name>SIScalarMultiplyByDimensionlessComplexConstant</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>double _Complex</type>
          <declname>constant</declname>
        </param>
        <briefdescription>
<para>Multiplies a scalar by a dimensionless complex constant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constant</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensionless constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1763" column="6" bodyfile="SIScalar.c" bodystart="1763" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ab21479f3800a5f8987efe8cd9f8e6e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByMultiplyingByDimensionlessComplexConstant</definition>
        <argsstring>(SIScalarRef theScalar, double _Complex constant)</argsstring>
        <name>SIScalarCreateByMultiplyingByDimensionlessComplexConstant</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>double _Complex</type>
          <declname>constant</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by multiplying by a dimensionless complex constant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constant</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensionless complex constant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1784" column="13" bodyfile="SIScalar.c" bodystart="1784" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a8a4239f31de8e502c21b90874e8f026d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarConjugate</definition>
        <argsstring>(SIMutableScalarRef theScalar)</argsstring>
        <name>SIScalarConjugate</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Conjugates a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1793" column="6" bodyfile="SIScalar.c" bodystart="1793" bodyend="1811"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ad525807959f529cf2e377144a9c6bee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByConjugation</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarCreateByConjugation</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by conjugation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1813" column="13" bodyfile="SIScalar.c" bodystart="1813" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a6698d80aeea7be6c019e29ab990489da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarTakeNthRoot</definition>
        <argsstring>(SIMutableScalarRef theScalar, uint8_t root, OCStringRef *error)</argsstring>
        <name>SIScalarTakeNthRoot</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>root</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Takes the Nth root of the scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer root. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1822" column="6" bodyfile="SIScalar.c" bodystart="1822" bodyend="1852"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a2454cac46d96483479031f31e7c85b1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByTakingNthRoot</definition>
        <argsstring>(SIScalarRef theScalar, uint8_t root, OCStringRef *error)</argsstring>
        <name>SIScalarCreateByTakingNthRoot</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>root</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by taking the Nth root. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>The integer root. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object, or NULL if operation cannot be done. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1854" column="13" bodyfile="SIScalar.c" bodystart="1854" bodyend="1862"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ada2d52caaaf6fb58818c359a7a542ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarTakeLog10</definition>
        <argsstring>(SIMutableScalarRef theScalar, OCStringRef *error)</argsstring>
        <name>SIScalarTakeLog10</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Takes the log10 of the scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCString describing the error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1865" column="6" bodyfile="SIScalar.c" bodystart="1865" bodyend="1892"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1afe1f8d80b837b328b4145ddce02e4c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarZeroPart</definition>
        <argsstring>(SIMutableScalarRef theScalar, complexPart part)</argsstring>
        <name>SIScalarZeroPart</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528" kindref="member">complexPart</ref></type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Zero part of the scalar&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>The part to zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false, indicating success of operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1895" column="6" bodyfile="SIScalar.c" bodystart="1895" bodyend="1953"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a833180590058cdec360e3f19e185d772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateByZeroingPart</definition>
        <argsstring>(SIScalarRef theScalar, complexPart part)</argsstring>
        <name>SIScalarCreateByZeroingPart</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528" kindref="member">complexPart</ref></type>
          <declname>part</declname>
        </param>
        <briefdescription>
<para>Creates a scalar by zeroing part of its value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>part</parametername>
</parameternamelist>
<parameterdescription>
<para>The part to zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SIScalar object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1955" column="13" bodyfile="SIScalar.c" bodystart="1955" bodyend="1962"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aa2e50aa931bd4fbf0082e61179077e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
        <definition>SIScalarRef SIScalarCreateWithStringContainingSingleUnitFromLibrary</definition>
        <argsstring>(OCStringRef theString)</argsstring>
        <name>SIScalarCreateWithStringContainingSingleUnitFromLibrary</name>
        <param>
          <type>OCStringRef</type>
          <declname>theString</declname>
        </param>
        <briefdescription>
<para>Creates a new SIScalar object from a string containing a single unit name from the unit library. </para>
        </briefdescription>
        <detaileddescription>
<para>This function parses the provided OCStringRef, which should contain a single valid unit name (e.g., &quot;m&quot;, &quot;kg&quot;, &quot;s&quot;). It returns a new immutable <ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref> representing the parsed unit with a value of 1.0, or NULL if the string is invalid or the unit is not found.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theString</parametername>
</parameternamelist>
<parameterdescription>
<para>An OCStringRef containing the name or symbol of a single unit to look up in the unit library. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref> representing the unit with value 1.0, or NULL if the string is invalid or the unit is not found.</para>
</simplesect>
<simplesect kind="note"><para>The caller is responsible for releasing the returned <ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref>. </para>
</simplesect>
<simplesect kind="note"><para>This function does not support parsing compound units or expressions; only single unit names are accepted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="1964" column="13" bodyfile="SIScalar.c" bodystart="1964" bodyend="2229"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a58515d526f3199c412f6ea01ae177d2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCStringRef</type>
        <definition>static OCStringRef SIScalarCreateStringValueSplitByUnits</definition>
        <argsstring>(SIScalarRef theScalar, OCArrayRef units, bool doubleCheck, OCStringRef *error)</argsstring>
        <name>SIScalarCreateStringValueSplitByUnits</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCArrayRef</type>
          <declname>units</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>doubleCheck</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2231" column="20" bodyfile="SIScalar.c" bodystart="2231" bodyend="2305"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a78d9d62c2d7d6b306bbbb43f9f558438" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCComparisonResult</type>
        <definition>static OCComparisonResult compareOnlyTheStrings</definition>
        <argsstring>(const void *val1, const void *val2, void *context)</argsstring>
        <name>compareOnlyTheStrings</name>
        <param>
          <type>const void *</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>val2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2307" column="27" bodyfile="SIScalar.c" bodystart="2307" bodyend="2319"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aede1b8a7ae75dc6546b33080c1be78ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCArrayRef</type>
        <definition>OCArrayRef SIScalarCreateArrayOfConversionQuantitiesScalarsAndStringValues</definition>
        <argsstring>(SIScalarRef theScalar, OCStringRef quantity, OCStringRef *error)</argsstring>
        <name>SIScalarCreateArrayOfConversionQuantitiesScalarsAndStringValues</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef</type>
          <declname>quantity</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2322" column="12" bodyfile="SIScalar.c" bodystart="2322" bodyend="2493"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a3028ef5c6a8e0130cac75049cbeddf52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCArrayRef</type>
        <definition>OCArrayRef SIScalarCreateArrayOfConversionQuantitiesAndUnits</definition>
        <argsstring>(SIScalarRef theScalar, OCStringRef quantity, OCStringRef *error)</argsstring>
        <name>SIScalarCreateArrayOfConversionQuantitiesAndUnits</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef</type>
          <declname>quantity</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2495" column="12" bodyfile="SIScalar.c" bodystart="2495" bodyend="2539"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a2a34dd5cb7346f5c67781f92c9770898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SIScalarShow</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarShow</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Prints a short descriptor of the scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2545" column="6" bodyfile="SIScalar.c" bodystart="2545" bodyend="2555"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1adb14dd9e28cd1cda832d64f53eb2033c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarValidateProposedStringValue</definition>
        <argsstring>(SIScalarRef theScalar, OCStringRef proposedStringValue, OCStringRef *error)</argsstring>
        <name>SIScalarValidateProposedStringValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef</type>
          <declname>proposedStringValue</declname>
        </param>
        <param>
          <type>OCStringRef *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Validates whether a proposed string contains a scalar quantity with the same dimensionality as the scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proposedStringValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Proposed string containing a quantity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to error message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean indicating true or false.</para>
</simplesect>
It is the responsibility of the calling method to release the CFError object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2557" column="6" bodyfile="SIScalar.c" bodystart="2557" bodyend="2581"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1affca2a0f2c0796fa9c9c9aaaccf55e80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCStringRef</type>
        <definition>OCStringRef SIScalarCreateNumericStringValue</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarCreateNumericStringValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Creates a string value representation of the numeric part of the scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An OCString object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2583" column="13" bodyfile="SIScalar.c" bodystart="2583" bodyend="2600"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a13d59fede000af553c063ed16d691d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCStringRef</type>
        <definition>OCStringRef SIScalarCreateStringValue</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarCreateStringValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Creates a string value representation of the scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An OCString object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2602" column="13" bodyfile="SIScalar.c" bodystart="2602" bodyend="2621"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ae30b1f110e453f8c77e776a7436f69a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCStringRef</type>
        <definition>OCStringRef SIScalarCreateStringValueForPart</definition>
        <argsstring>(SIScalarRef theScalar, complexPart thePart)</argsstring>
        <name>SIScalarCreateStringValueForPart</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528" kindref="member">complexPart</ref></type>
          <declname>thePart</declname>
        </param>
        <briefdescription>
<para>Creates a string value representation for the part of the scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thePart</parametername>
</parameternamelist>
<parameterdescription>
<para>The part of the scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An OCString object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2623" column="13" bodyfile="SIScalar.c" bodystart="2623" bodyend="2630"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a7a2723bef925a3c95053bb603182d669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCStringRef</type>
        <definition>OCStringRef SIScalarCreateNumericStringValueWithFormat</definition>
        <argsstring>(SIScalarRef theScalar, OCStringRef format)</argsstring>
        <name>SIScalarCreateNumericStringValueWithFormat</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Creates a string value representation of the numeric part of the scalar using format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An OCString object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2632" column="13" bodyfile="SIScalar.c" bodystart="2632" bodyend="2674"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a1171ae9900d4eb072b3c3177ad99869a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCStringRef</type>
        <definition>OCStringRef SIScalarCreateUnitString</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarCreateUnitString</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Creates a string value representation of the unit of the scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An OCString object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2676" column="13" bodyfile="SIScalar.c" bodystart="2676" bodyend="2682"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a3e3321d48da28c9f91db264a78ce18cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCStringRef</type>
        <definition>OCStringRef SIScalarCreateStringValueWithFormat</definition>
        <argsstring>(SIScalarRef theScalar, OCStringRef format)</argsstring>
        <name>SIScalarCreateStringValueWithFormat</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCStringRef</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Creates a string value representation of the scalar using format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An OCString object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2684" column="13" bodyfile="SIScalar.c" bodystart="2684" bodyend="2758"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a02f00b56378b057972c26e8ea821b2a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SIScalarAddToArrayAsStringValue</definition>
        <argsstring>(SIScalarRef theScalar, OCMutableArrayRef array)</argsstring>
        <name>SIScalarAddToArrayAsStringValue</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type>OCMutableArrayRef</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Adds the scalar to an array as a string value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para>The array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2760" column="6" bodyfile="SIScalar.c" bodystart="2760" bodyend="2767"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a91df1367c29fbf1e4fefd17fe319f201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarIsReal</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarIsReal</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Tests if scalar is real. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2771" column="6" bodyfile="SIScalar.c" bodystart="2771" bodyend="2777"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1ac7808439acd27c23c80f1ad58b6a8ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarIsImaginary</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarIsImaginary</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Tests if scalar is purely imaginary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2779" column="6" bodyfile="SIScalar.c" bodystart="2779" bodyend="2785"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a99cf86a454d157cc31ad81ea5112163f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarIsComplex</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarIsComplex</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Tests if scalar is complex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2787" column="6" bodyfile="SIScalar.c" bodystart="2787" bodyend="2793"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a78cc0116b408eac1226b0c318f1f6de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarIsZero</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarIsZero</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Tests if scalar is zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2795" column="6" bodyfile="SIScalar.c" bodystart="2795" bodyend="2802"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a1b9cffc79ff27fe72e1d56ecae9d0e08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarIsInfinite</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarIsInfinite</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Tests if scalar is infinite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2804" column="6" bodyfile="SIScalar.c" bodystart="2804" bodyend="2820"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a032a7852c3087bf821021113e4918cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarIsRealNonNegativeInteger</definition>
        <argsstring>(SIScalarRef theScalar)</argsstring>
        <name>SIScalarIsRealNonNegativeInteger</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <briefdescription>
<para>Tests if scalar is real and a non-negative integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2822" column="6" bodyfile="SIScalar.c" bodystart="2822" bodyend="2832"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a8520d2fe3bb1dfed954a6ee4a37455d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SIScalarEqual</definition>
        <argsstring>(SIScalarRef input1, SIScalarRef input2)</argsstring>
        <name>SIScalarEqual</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input1</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>input2</declname>
        </param>
        <briefdescription>
<para>Determines if the two scalars are equal in every attribute. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first scalar. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second scalar. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True or false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2834" column="6" bodyfile="SIScalar.c" bodystart="2834" bodyend="2862"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1a860f1e186f979ef05cb5203ae03b934d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCComparisonResult</type>
        <definition>OCComparisonResult SIScalarCompare</definition>
        <argsstring>(SIScalarRef theScalar, SIScalarRef theOtherScalar)</argsstring>
        <name>SIScalarCompare</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>scalar</declname>
          <defname>theScalar</defname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>otherScalar</declname>
          <defname>theOtherScalar</defname>
        </param>
        <briefdescription>
<para>Compares two scalars and returns a comparison result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The first scalar object to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>otherScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The second scalar object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A OCComparisonResult constant that indicates whether number is equal to, less than, or greater than otherNumber. Possible values are kOCCompareLessThan, kOCCompareEqualTo, kOCCompareGreaterThan, or kOCCompareUnequalDimensionalities. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="2864" column="20" bodyfile="SIScalar.c" bodystart="2864" bodyend="3020"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aff44cf1ff8c5b5cac231cbf287aec9da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCComparisonResult</type>
        <definition>OCComparisonResult SIScalarCompareReduced</definition>
        <argsstring>(SIScalarRef theScalar, SIScalarRef theOtherScalar)</argsstring>
        <name>SIScalarCompareReduced</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theOtherScalar</declname>
        </param>
        <briefdescription>
<para>Compares two scalars in reduced units and returns a comparison result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The first scalar object to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theOtherScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The second scalar object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A OCComparisonResult constant that indicates whether number is equal to, less than, or greater than otherNumber. Possible values are kOCCompareLessThan, kOCCompareEqualTo, kOCCompareGreaterThan, or kOCCompareUnequalDimensionalities. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="3022" column="20" bodyfile="SIScalar.c" bodystart="3022" bodyend="3032"/>
      </memberdef>
      <memberdef kind="function" id="_s_i_scalar_8c_1aa27de8bd2878818d18b4b33d5d0e09a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OCComparisonResult</type>
        <definition>OCComparisonResult SIScalarCompareLoose</definition>
        <argsstring>(SIScalarRef theScalar, SIScalarRef theOtherScalar)</argsstring>
        <name>SIScalarCompareLoose</name>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theScalar</declname>
        </param>
        <param>
          <type><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref></type>
          <declname>theOtherScalar</declname>
        </param>
        <briefdescription>
<para>Compares two scalars loosely and returns a comparison result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>theScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The first scalar object to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theOtherScalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The second scalar object to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A OCComparisonResult constant that indicates whether number is equal to, less than, or greater than otherNumber. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SIScalar.c" line="3034" column="20" bodyfile="SIScalar.c" bodystart="3034" bodyend="3186"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>SIScalar.c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>SITypes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Created<sp/>by<sp/>philip<sp/>on<sp/>6/14/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>©<sp/>2017<sp/>PhySy<sp/>Ltd.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SILibrary.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>likely<sp/>there<sp/>or<sp/>in<sp/>a<sp/>header,<sp/>but<sp/>good<sp/>to<sp/>ensure<sp/>for<sp/>printf,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>For<sp/>malloc,<sp/>free,<sp/>abs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>math<sp/>functions<sp/>like<sp/>nan,<sp/>fabsf,<sp/>log10,<sp/>pow,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>OCTypeID<sp/>kSIScalarID<sp/>=<sp/>_kOCNotATypeID;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SIScalar<sp/>Opaque<sp/>Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="struct_____s_i_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_____s_i_scalar" kindref="compound">__SIScalar</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>OCBase<sp/>_base;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>__SIQuantity<sp/>Type<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>numberType<sp/><sp/><sp/><sp/><sp/><sp/>type;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="union_____s_i_number" kindref="compound">__SINumber</ref><sp/><sp/><sp/><sp/><sp/><sp/>value;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__SIScalarEqual(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>theType1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>theType2)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theNumber1<sp/>=<sp/>(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref>)<sp/>theType1;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theNumber2<sp/>=<sp/>(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref>)<sp/>theType2;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theNumber1-&gt;_base.typeID<sp/>!=<sp/>theNumber2-&gt;_base.typeID)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>theNumber1<sp/>||<sp/>NULL<sp/>==<sp/>theNumber2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theNumber1<sp/>==<sp/>theNumber2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theNumber1-&gt;type<sp/>!=<sp/>theNumber2-&gt;type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!OCTypeEqual(theNumber1-&gt;unit,<sp/>theNumber2-&gt;unit))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theNumber1-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theNumber1-&gt;value.floatValue<sp/>!=<sp/>theNumber2-&gt;value.floatValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theNumber1-&gt;value.doubleValue<sp/>!=<sp/>theNumber2-&gt;value.doubleValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theNumber1-&gt;value.floatComplexValue<sp/>!=<sp/>theNumber2-&gt;value.floatComplexValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theNumber1-&gt;value.floatComplexValue<sp/>!=<sp/>theNumber2-&gt;value.doubleComplexValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__SIScalarFinalize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>theType)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>theType)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theNumber<sp/>=<sp/>(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref>)<sp/>theType;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)theNumber);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>OCStringRef<sp/>__SIScalarCopyFormattingDescription(OCTypeRef<sp/>theType)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theNumber<sp/>=<sp/>(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref>)<sp/>theType;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theNumber-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>OCStringCreateWithFormat(STR(</highlight><highlight class="stringliteral">&quot;%f<sp/>%@&quot;</highlight><highlight class="normal">),<sp/>theNumber-&gt;value.floatValue,<sp/>theNumber-&gt;unit);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>OCStringCreateWithFormat(STR(</highlight><highlight class="stringliteral">&quot;%lf<sp/>%@&quot;</highlight><highlight class="normal">),<sp/>theNumber-&gt;value.doubleValue,<sp/>theNumber-&gt;unit);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>OCStringCreateWithFormat(STR(</highlight><highlight class="stringliteral">&quot;%f+I•%f<sp/>%@&quot;</highlight><highlight class="normal">),<sp/>crealf(theNumber-&gt;value.floatComplexValue),<sp/>cimagf(theNumber-&gt;value.floatComplexValue),<sp/>theNumber-&gt;unit);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>OCStringCreateWithFormat(STR(</highlight><highlight class="stringliteral">&quot;%lf+I•%lf<sp/>%@&quot;</highlight><highlight class="normal">),<sp/>creal(theNumber-&gt;value.doubleComplexValue),<sp/>cimag(theNumber-&gt;value.doubleComplexValue),<sp/>theNumber-&gt;unit);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="_s_i_scalar_8h_1ae73ca7ef4537227256f6ee2ae9a6aee0" refkind="member"><highlight class="normal">OCTypeID<sp/>SIScalarGetTypeID(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kSIScalarID<sp/>==<sp/>_kOCNotATypeID)<sp/>kSIScalarID<sp/>=<sp/>OCRegisterType(</highlight><highlight class="stringliteral">&quot;SIScalar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kSIScalarID;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_____s_i_scalar" kindref="compound">__SIScalar</ref><sp/>*SIScalarAllocate()</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_____s_i_scalar" kindref="compound">__SIScalar</ref><sp/>*theNumber<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_____s_i_scalar" kindref="compound">__SIScalar</ref>));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>theNumber)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>theNumber-&gt;_base.typeID<sp/>=<sp/>SIScalarGetTypeID();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>theNumber-&gt;_base.retainCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>theNumber-&gt;_base.finalize<sp/>=<sp/>__SIScalarFinalize;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>theNumber-&gt;_base.equal<sp/>=<sp/>__SIScalarEqual;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>theNumber-&gt;_base.copyFormattingDesc<sp/>=<sp/>__SIScalarCopyFormattingDescription;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>theNumber-&gt;unit<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>theNumber-&gt;type<sp/>=<sp/>kOCNumberFloat32Type;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theNumber;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreate(<ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit,<sp/>numberType<sp/>type,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_____s_i_scalar" kindref="compound">__SIScalar</ref><sp/>*theNumber<sp/>=<sp/>SIScalarAllocate();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>theNumber)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>theNumber-&gt;type<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>value;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theNumber-&gt;value.floatValue<sp/>=<sp/>*ptr;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>value;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theNumber-&gt;value.doubleValue<sp/>=<sp/>*ptr;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>*)<sp/>value;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theNumber-&gt;value.floatComplexValue<sp/>=<sp/>*ptr;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>*ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>*)<sp/>value;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theNumber-&gt;value.doubleComplexValue<sp/>=<sp/>*ptr;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unit)<sp/>theNumber-&gt;unit<sp/>=<sp/>unit;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>theNumber-&gt;unit<sp/>=<sp/>SIUnitDimensionlessAndUnderived();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref>)<sp/>theNumber;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theNumber;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>SIScalarCreateMutable(<ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit,<sp/><sp/>numberType<sp/>elementType,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>SIScalarCreate(unit,<sp/>elementType,<sp/>value);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>@function<sp/>SIScalarCreateCopy</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>@abstract<sp/>Creates<sp/>a<sp/>copy<sp/>of<sp/>a<sp/>scalar</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>@param<sp/>theScalar<sp/>The<sp/>scalar.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>@result<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>scalar.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="_s_i_scalar_8h_1af6ad9941f221e08b720cf78d258469ec" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateCopy(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreate(theScalar-&gt;unit,<sp/>theScalar-&gt;type,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>&amp;theScalar-&gt;value);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="_s_i_scalar_8h_1a5a4eae72c05f0cd99d3f28e4a8e362ee" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>SIScalarCreateMutableCopy(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreateMutable(theScalar-&gt;unit,theScalar-&gt;type,(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>&amp;theScalar-&gt;value);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//SIScalarRef<sp/>SIScalarCreateWithInt32(int32_t<sp/>input_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>SIScalarCreate(NULL,<sp/>kOCNumberSInt32Type,<sp/>&amp;input_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//SIMutableScalarRef<sp/>SIScalarCreateMutableWithInt32(int32_t<sp/>input_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>SIScalarCreateMutable(NULL,<sp/>kOCNumberSInt32Type,<sp/>&amp;input_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//SIScalarRef<sp/>SIScalarCreateWithInt64(int64_t<sp/>input_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>SIScalarCreate(NULL,<sp/>kOCNumberSInt64Type,<sp/>&amp;input_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//SIMutableScalarRef<sp/>SIScalarCreateMutableWithInt64(int64_t<sp/>input_value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>SIScalarCreateMutable(NULL,<sp/>kOCNumberSInt64Type,<sp/>&amp;input_value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="_s_i_scalar_8h_1ae51f925cba2fa406727411c6f9333c08" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateWithFloat(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>input_value,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreate(unit,<sp/>kOCNumberFloat32Type,<sp/>&amp;input_value);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="_s_i_scalar_8h_1a45e2f5d6f6dea3e55bf20c5ad61442b7" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>SIScalarCreateMutableWithFloat(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>input_value,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreateMutable(unit,<sp/>kOCNumberFloat32Type,<sp/>&amp;input_value);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="_s_i_scalar_8h_1a2371d11d3cb75ffaab47817ccda03d7e" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateWithDouble(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>input_value,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreate(unit,<sp/>kOCNumberFloat64Type,<sp/>&amp;input_value);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="_s_i_scalar_8h_1a687b82fc021bf7b637cf62affb5931bc" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>SIScalarCreateMutableWithDouble(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>input_value,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreateMutable(unit,<sp/>kOCNumberFloat64Type,<sp/>&amp;input_value);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="_s_i_scalar_8h_1aed59f1dfb9a2fa1c5df27082f816595a" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateWithFloatComplex(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>input_value,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreate(unit,<sp/>kOCNumberFloat32ComplexType,<sp/>&amp;input_value);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="_s_i_scalar_8h_1af8f30169fd64ac27af25a9f77a396ca4" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>SIScalarCreateMutableWithFloatComplex(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>input_value,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreateMutable(unit,<sp/>kOCNumberFloat32ComplexType,<sp/>&amp;input_value);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="_s_i_scalar_8h_1a2f2aebbf0c3110cdec18654e6cb174fd" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateWithDoubleComplex(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>input_value,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreate(unit,<sp/>kOCNumberFloat64ComplexType,<sp/>&amp;input_value);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="_s_i_scalar_8h_1a824aa42d425169ea96d4197f87dca776" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>SIScalarCreateMutableWithDoubleComplex(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>input_value,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreateMutable(unit,<sp/>kOCNumberFloat64ComplexType,<sp/>&amp;input_value);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>Accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="_s_i_scalar_8h_1a1f82a304e43c692d7cd6e838d58ca065" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SIScalarSetElementType(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/>numberType<sp/>elementType)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>theScalar-&gt;value.floatValue;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>elementType;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(elementType)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>theScalar-&gt;value.doubleValue;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>elementType;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(elementType)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>theScalar-&gt;value.floatComplexValue;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>elementType;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(elementType)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>theScalar-&gt;value.doubleComplexValue;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>elementType;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(elementType)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="_s_i_scalar_8h_1acb83c99dcbadf14906601e2ac6d16ab1" refkind="member"><highlight class="normal"><ref refid="union_____s_i_number" kindref="compound">__SINumber</ref><sp/>SIScalarGetValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="_s_i_scalar_8h_1aee93f8a43574ca584073e24185b4ef3f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SIScalarSetFloatValue(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;type=<sp/>kOCNumberFloat32Type;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="_s_i_scalar_8h_1a2c82abbde15f38a49f84d72bb0105d65" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SIScalarSetDoubleValue(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;type=<sp/>kOCNumberFloat64Type;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="_s_i_scalar_8h_1a37709d874b4f8935a428d13e8c772a91" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SIScalarSetFloatComplexValue(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>value)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;type=<sp/>kOCNumberFloat32ComplexType;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="_s_i_scalar_8h_1a697d8dc166fd17e955ec42ea2f18332d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SIScalarSetDoubleComplexValue(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;type=<sp/>kOCNumberFloat64ComplexType;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="_s_i_scalar_8h_1afd86f58aa4ac3338cebf0b5381fb8e5d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SIScalarFloatValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,0);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatValue;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleValue;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatComplexValue;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleComplexValue;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan(NULL);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="_s_i_scalar_8h_1aef133da263cd2e705deb20078f7db309" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SIScalarDoubleValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,0);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatValue;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleValue;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatComplexValue;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleComplexValue;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan(NULL);</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="_s_i_scalar_8h_1adac3474927153359307977461f1968c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>SIScalarFloatComplexValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,0);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex)<sp/>theScalar-&gt;value.floatValue;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex)<sp/>theScalar-&gt;value.doubleValue;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex)<sp/>theScalar-&gt;value.floatComplexValue;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex)<sp/>theScalar-&gt;value.doubleComplexValue;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan(NULL);</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="_s_i_scalar_8h_1a4a72448bde735398fe52b1b41bfe9357" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>SIScalarDoubleComplexValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,0);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex)<sp/>theScalar-&gt;value.floatValue;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex)<sp/>theScalar-&gt;value.doubleValue;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex)<sp/>theScalar-&gt;value.floatComplexValue;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex)<sp/>theScalar-&gt;value.doubleComplexValue;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan(NULL);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="_s_i_scalar_8h_1ae18f03fc24864a424e5b85b63b37400b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SIScalarMagnitudeValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,0);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValue(theScalar);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cabs(value);</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="_s_i_scalar_8h_1a8beeac762a9466e5c81959feed0b51c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SIScalarArgumentValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,0);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValue(theScalar);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cargument(value);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="_s_i_scalar_8h_1a26066eae739cb00d411f8db68ea24009" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SIScalarFloatValueInCoherentUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,nan(NULL));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>coherentUnit<sp/>=<sp/>SIUnitFindCoherentSIUnitWithDimensionality(SIUnitGetDimensionality(theScalar-&gt;unit));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion<sp/>=<sp/>SIUnitConversion(theScalar-&gt;unit,coherentUnit);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatValue*conversion;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleValue*conversion;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatComplexValue*conversion;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleComplexValue*conversion;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="_s_i_scalar_8h_1a96a0168dab04f04cde0369eee709d2c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SIScalarDoubleValueInCoherentUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,nan(NULL));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>coherentUnit<sp/>=<sp/>SIUnitFindCoherentSIUnitWithDimensionality(SIUnitGetDimensionality(theScalar-&gt;unit));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion<sp/>=<sp/>SIUnitConversion(theScalar-&gt;unit,coherentUnit);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatValue*conversion;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleValue*conversion;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatComplexValue*conversion;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleComplexValue*conversion;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="_s_i_scalar_8h_1aef06532677e4ef24bec545f21ae69e87" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>SIScalarFloatComplexValueInCoherentUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,nan(NULL));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>coherentUnit<sp/>=<sp/>SIUnitFindCoherentSIUnitWithDimensionality(SIUnitGetDimensionality(theScalar-&gt;unit));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion<sp/>=<sp/>SIUnitConversion(theScalar-&gt;unit,coherentUnit);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatValue*conversion;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleValue*conversion;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatComplexValue*conversion;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleComplexValue*conversion;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="_s_i_scalar_8h_1aa956a5675cc052badc3d98d31ef652df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>SIScalarDoubleComplexValueInCoherentUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,nan(NULL));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>coherentUnit<sp/>=<sp/>SIUnitFindCoherentSIUnitWithDimensionality(SIUnitGetDimensionality(theScalar-&gt;unit));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion<sp/>=<sp/>SIUnitConversion(theScalar-&gt;unit,coherentUnit);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatValue*conversion;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleValue*conversion;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatComplexValue*conversion;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleComplexValue*conversion;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="_s_i_scalar_8h_1a09dfb1b3a8c488c64e38f7d04b83c138" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SIScalarFloatValueInUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*success)</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,nan(NULL));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar),SIUnitGetDimensionality(unit)))<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion<sp/>=<sp/>SIUnitConversion(theScalar-&gt;unit,unit);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatValue*conversion;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleValue*conversion;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatComplexValue*conversion;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleComplexValue*conversion;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(success)<sp/>*success<sp/>*=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan(NULL);</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="_s_i_scalar_8h_1a15e42e708d9530fe3691ab8bb4f807b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SIScalarDoubleValueInUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*success)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,nan(NULL));</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar),SIUnitGetDimensionality(unit)))<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion<sp/>=<sp/>SIUnitConversion(theScalar-&gt;unit,unit);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatValue*conversion;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleValue*conversion;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatComplexValue*conversion;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleComplexValue*conversion;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(success)<sp/>*success<sp/>*=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan(NULL);</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="_s_i_scalar_8h_1a08973dd70fd31016cd096132e40607f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>SIScalarFloatComplexValueInUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*success)</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,nan(NULL));</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar),SIUnitGetDimensionality(unit)))<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion<sp/>=<sp/>SIUnitConversion(theScalar-&gt;unit,unit);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatValue*conversion;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleValue*conversion;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatComplexValue*conversion;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleComplexValue*conversion;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(success)<sp/>*success<sp/>*=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan(NULL);</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="_s_i_scalar_8h_1a25ee1924e146f0d2e149c62876d68984" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>SIScalarDoubleComplexValueInUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*success)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL==theScalar)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan(NULL);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar),SIUnitGetDimensionality(unit)))<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion<sp/>=<sp/>SIUnitConversion(theScalar-&gt;unit,unit);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatValue*conversion;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleValue*conversion;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatComplexValue*conversion;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleComplexValue*conversion;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(success)<sp/>*success<sp/>*=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nan(NULL);</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>Operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="_s_i_scalar_8h_1ab52ef39219c2374d068d1ff6126b0c33" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByConvertingToNumberType(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>numberType<sp/>elementType)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>SIScalarSetElementType((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>elementType);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="_s_i_scalar_8h_1a72be073d1d7d847db53326244e4c7db7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarTakeComplexPart(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528" kindref="member">complexPart</ref><sp/>part)</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a267d6b1901571f5e9371c1888360bc77" kindref="member">kSIImaginaryPart</ref><sp/>||<sp/>part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a2a2103627466109bc19992cc4fe87b95" kindref="member">kSIArgumentPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528ab6a1f5970ae3e770c5c1336ff7580f2e" kindref="member">kSIMagnitudePart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>fabsf(theScalar-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528af1cd678e8ab634f3088f20c5fadb572e" kindref="member">kSIRealPart</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a267d6b1901571f5e9371c1888360bc77" kindref="member">kSIImaginaryPart</ref><sp/>||<sp/>part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a2a2103627466109bc19992cc4fe87b95" kindref="member">kSIArgumentPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528ab6a1f5970ae3e770c5c1336ff7580f2e" kindref="member">kSIMagnitudePart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>fabs(theScalar-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528af1cd678e8ab634f3088f20c5fadb572e" kindref="member">kSIRealPart</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528af1cd678e8ab634f3088f20c5fadb572e" kindref="member">kSIRealPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>creal(theScalar-&gt;value.floatComplexValue);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>kOCNumberFloat32Type;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a267d6b1901571f5e9371c1888360bc77" kindref="member">kSIImaginaryPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>cimag(theScalar-&gt;value.floatComplexValue);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>kOCNumberFloat32Type;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a2a2103627466109bc19992cc4fe87b95" kindref="member">kSIArgumentPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>cargument(theScalar-&gt;value.floatComplexValue);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>kOCNumberFloat32Type;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;unit<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;rad&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528ab6a1f5970ae3e770c5c1336ff7580f2e" kindref="member">kSIMagnitudePart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>cabs(theScalar-&gt;value.floatComplexValue);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>kOCNumberFloat32Type;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528af1cd678e8ab634f3088f20c5fadb572e" kindref="member">kSIRealPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>creal(theScalar-&gt;value.doubleComplexValue);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>kOCNumberFloat64Type;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a267d6b1901571f5e9371c1888360bc77" kindref="member">kSIImaginaryPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>cimag(theScalar-&gt;value.doubleComplexValue);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>kOCNumberFloat64Type;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a2a2103627466109bc19992cc4fe87b95" kindref="member">kSIArgumentPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>cargument(theScalar-&gt;value.doubleComplexValue);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>kOCNumberFloat64Type;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;unit<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;rad&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528ab6a1f5970ae3e770c5c1336ff7580f2e" kindref="member">kSIMagnitudePart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>cabs(theScalar-&gt;value.doubleComplexValue);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;type<sp/>=<sp/>kOCNumberFloat64Type;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701" refid="_s_i_scalar_8h_1aa84b2b2d1077869403ad6206c7542c77" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByTakingComplexPart(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528" kindref="member">complexPart</ref><sp/>part)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarTakeComplexPart((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>part))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="_s_i_scalar_8h_1a3677eb2468ac84a15844cd25151399c5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarReduceUnit(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>reducedUnit<sp/>=<sp/>SIUnitByReducing(theScalar-&gt;unit,&amp;unit_multiplier);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;unit<sp/>=<sp/>reducedUnit;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>theScalar-&gt;value.floatValue*unit_multiplier;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>reducedUnit<sp/>=<sp/>SIUnitByReducing(theScalar-&gt;unit,&amp;unit_multiplier);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;unit<sp/>=<sp/>reducedUnit;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>theScalar-&gt;value.doubleValue*unit_multiplier;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>reducedUnit<sp/>=<sp/>SIUnitByReducing(theScalar-&gt;unit,&amp;unit_multiplier);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;unit<sp/>=<sp/>reducedUnit;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>theScalar-&gt;value.floatComplexValue*unit_multiplier;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>reducedUnit<sp/>=<sp/>SIUnitByReducing(theScalar-&gt;unit,&amp;unit_multiplier);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;unit<sp/>=<sp/>reducedUnit;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>theScalar-&gt;value.doubleComplexValue*unit_multiplier;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750" refid="_s_i_scalar_8h_1abac2ae228535f3d26163282e0b65ba81" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByReducingUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarReduceUnit((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759" refid="_s_i_scalar_8h_1a5b786161f6d7945b49265a2044cf4687" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarConvertToUnit(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(SIUnitGetDimensionality(theScalar-&gt;unit),SIUnitGetDimensionality(unit)))<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Incompatible<sp/>Dimensionalities.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>conversion<sp/>=<sp/>SIUnitConversion(theScalar-&gt;unit,unit);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;unit<sp/>=<sp/>unit;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>kOCNumberSInt32Type:<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.int32Value<sp/>=<sp/>theScalar-&gt;value.int32Value*conversion;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>kOCNumberSInt64Type:<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.int64Value<sp/>=<sp/>theScalar-&gt;value.int64Value*conversion;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>theScalar-&gt;value.floatValue*conversion;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>theScalar-&gt;value.doubleValue*conversion;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>theScalar-&gt;value.floatComplexValue*conversion;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>theScalar-&gt;value.doubleComplexValue*conversion;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801" refid="_s_i_scalar_8h_1accae31270079adac1d12c1f1176cac74" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByConvertingToUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarConvertToUnit((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>unit,<sp/>error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811" refid="_s_i_scalar_8h_1a48d501564d32aa25564096a01d71442f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarConvertToCoherentUnit(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>coherentUnit<sp/>=<sp/>SIUnitFindCoherentSIUnitWithDimensionality(SIUnitGetDimensionality(theScalar-&gt;unit));</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarConvertToUnit(theScalar,<sp/>coherentUnit,<sp/>error);</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819" refid="_s_i_scalar_8h_1ae1afd60d765f3527f3e23ce056090855" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByConvertingToCoherentUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarConvertToCoherentUnit((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/><sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarBestConversionForQuantity(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>quantity,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="830"><highlight class="normal">{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL==quantity)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>OCArrayRef<sp/>units<sp/>=<sp/>SIUnitCreateArrayOfUnitsForQuantity(quantity);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(units==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>trialScalar<sp/>=<sp/>SIScalarCreateMutableCopy(theScalar);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarConvertToUnit(trialScalar,<sp/>OCArrayGetValueAtIndex(units,<sp/>0),<sp/>error))<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(trialScalar);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>originalMagnitude<sp/>=<sp/>fabs(log10(fabs(SIScalarDoubleValue(theScalar))));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>magnitude<sp/>=<sp/>originalMagnitude;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>best<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>index=1;<sp/>index&lt;OCArrayGetCount(units);<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>OCArrayGetValueAtIndex(units,<sp/>index);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarConvertToUnit(trialScalar,<sp/>unit,<sp/>error))<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(trialScalar);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trialMagnitude<sp/>=<sp/>fabs(log10(fabs(SIScalarDoubleValue(trialScalar))));</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(trialMagnitude<sp/>&lt;<sp/>magnitude)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>magnitude<sp/>=<sp/>trialMagnitude;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(abs(originalMagnitude<sp/>-<sp/>magnitude)&gt;2)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SIScalarConvertToUnit(theScalar,<sp/>OCArrayGetValueAtIndex(units,<sp/>best),<sp/>error);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(trialScalar);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868" refid="_s_i_scalar_8h_1aba05d6673cc9e3297badeecfcff311ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarAdd(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>target,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(target,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rules<sp/>for<sp/>addition<sp/>and<sp/>subtraction:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>-<sp/>numbers<sp/>must<sp/>have<sp/>the<sp/>same<sp/>dimensionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>-<sp/>returned<sp/>SIScalar<sp/>with<sp/>have<sp/>elementType<sp/>of<sp/>target<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>-<sp/>returned<sp/>SIScalar<sp/>will<sp/>have<sp/>unit<sp/>of<sp/>the<sp/>target<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(SIUnitGetDimensionality(target-&gt;unit),SIUnitGetDimensionality(input2-&gt;unit)))<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Incompatible<sp/>Dimensionalities.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(input2-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>SIScalarFloatValueInUnit(input2,<sp/>target-&gt;unit,<sp/>NULL);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>SIScalarDoubleValueInUnit(input2,<sp/>target-&gt;unit,<sp/>NULL);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarFloatComplexValueInUnit(input2,<sp/>target-&gt;unit,<sp/>NULL);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValueInUnit(input2,<sp/>target-&gt;unit,<sp/>NULL);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975" refid="_s_i_scalar_8h_1a60819e4dc3b1446d560a67e44102b261" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByAdding(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input1,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="976"><highlight class="normal">{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input1,NULL);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,NULL);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateByConvertingToNumberType(input1,<sp/>SIQuantityBestElementType((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input1,<sp/>(<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input2));</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarAdd((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>input2,<sp/>error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986" refid="_s_i_scalar_8h_1af86021ed84856607473dceabffb5bc49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarSubtract(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>target,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(target,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rules<sp/>for<sp/>addition<sp/>and<sp/>subtraction:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>-<sp/>numbers<sp/>must<sp/>have<sp/>the<sp/>same<sp/>dimensionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>-<sp/>returned<sp/>SIScalar<sp/>with<sp/>have<sp/>elementType<sp/>of<sp/>target<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>-<sp/>returned<sp/>SIScalar<sp/>will<sp/>have<sp/>unit<sp/>of<sp/>the<sp/>target<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(SIUnitGetDimensionality(target-&gt;unit),SIUnitGetDimensionality(input2-&gt;unit)))<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Incompatible<sp/>Dimensionalities.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(input2-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>SIScalarFloatValueInUnit(input2,<sp/>target-&gt;unit,<sp/>NULL);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>SIScalarDoubleValueInUnit(input2,<sp/>target-&gt;unit,<sp/>NULL);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarFloatComplexValueInUnit(input2,<sp/>target-&gt;unit,<sp/>NULL);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValueInUnit(input2,<sp/>target-&gt;unit,<sp/>NULL);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>-<sp/>value;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)<sp/>target-&gt;value.doubleComplexValue<sp/>-<sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>value;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093" refid="_s_i_scalar_8h_1a0fc57dfa64cf9ec1b97e523964d62d1c" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateBySubtracting(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input1,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input1,NULL);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,NULL);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateByConvertingToNumberType(input1,<sp/>SIQuantityBestElementType((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input1,<sp/>(<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input2));</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarSubtract((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>input2,<sp/>error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104" refid="_s_i_scalar_8h_1a351aaadedc33399a02e239abe9090b7e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarMultiplyWithoutReducingUnit(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>target,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(target,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>SIUnitByMultiplyingWithoutReducing(target-&gt;unit,<sp/>input2-&gt;unit,<sp/>&amp;unit_multiplier,<sp/>error);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>target-&gt;unit<sp/>=<sp/>unit;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(input2-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>input2-&gt;value.floatValue;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>input2-&gt;value.doubleValue;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>input2-&gt;value.floatComplexValue;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>input2-&gt;value.doubleComplexValue;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203" refid="_s_i_scalar_8h_1ac5ebd466101d33c39529032e8166be61" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByMultiplyingWithoutReducingUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input1,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input1,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateByConvertingToNumberType(input1,<sp/>SIQuantityBestElementType((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input1,<sp/>(<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input2));</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>SIScalarMultiplyWithoutReducingUnit((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>input2,<sp/>error);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213" refid="_s_i_scalar_8h_1acf385da2dd8cd404fe0ec612dd1883d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarMultiply(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>target,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(target,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>SIUnitByMultiplying(target-&gt;unit,<sp/>input2-&gt;unit,<sp/>&amp;unit_multiplier,<sp/>error);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>target-&gt;unit<sp/>=<sp/>unit;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(input2-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>input2-&gt;value.floatValue;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>input2-&gt;value.doubleValue;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>input2-&gt;value.floatComplexValue;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>input2-&gt;value.doubleComplexValue;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>value*unit_multiplier;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312" refid="_s_i_scalar_8h_1a5383911a73021f9c8c7d6194c102d6d7" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByMultiplying(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input1,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input1,NULL);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,NULL);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateByConvertingToNumberType(input1,<sp/>SIQuantityBestElementType((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input1,<sp/>(<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input2));</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>SIScalarMultiply((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>input2,<sp/>error);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322" refid="_s_i_scalar_8h_1a191f41282c2325d4f6fe546fd21c72b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarDivideWithoutReducingUnit(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>target,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(target,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>SIUnitByDividingWithoutReducing(target-&gt;unit,<sp/>input2-&gt;unit,<sp/>&amp;unit_multiplier);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>target-&gt;unit<sp/>=<sp/>unit;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(input2-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>input2-&gt;value.floatValue;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value==0)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>input2-&gt;value.doubleValue;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value==0)<sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>input2-&gt;value.floatComplexValue;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value==0)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>input2-&gt;value.doubleComplexValue;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value==0)<sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441" refid="_s_i_scalar_8h_1a7e783c56f337e132d2619d3a39d74214" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarDivide(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>target,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL==target)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(target,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL==input2)<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>SIUnitByDividing(target-&gt;unit,<sp/>input2-&gt;unit,<sp/>&amp;unit_multiplier);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>target-&gt;unit<sp/>=<sp/>unit;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(input2-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>input2-&gt;value.floatValue;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value==0)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>input2-&gt;value.doubleValue;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value==0)<sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>input2-&gt;value.floatComplexValue;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value==0)<sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>input2-&gt;value.doubleComplexValue;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value==0)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(target-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatValue<sp/>=<sp/>target-&gt;value.floatValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleValue<sp/>=<sp/>target-&gt;value.doubleValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.floatComplexValue<sp/>=<sp/>target-&gt;value.floatComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;value.doubleComplexValue<sp/>=<sp/>target-&gt;value.doubleComplexValue<sp/>*<sp/>unit_multiplier/value;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565" refid="_s_i_scalar_8h_1a10524a64224b828383921a8242143f49" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByDividingWithoutReducingUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input1,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input1,NULL);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,NULL);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateByConvertingToNumberType(input1,<sp/>SIQuantityBestElementType((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input1,<sp/>(<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input2));</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarDivideWithoutReducingUnit((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>input2,<sp/>error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576" refid="_s_i_scalar_8h_1ab0b7351461dcc0ff7ad993dfdb931f32" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByDividing(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input1,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input1,NULL);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,NULL);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateByConvertingToNumberType(input1,<sp/>SIQuantityBestElementType((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input1,<sp/>(<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>input2));</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarDivide((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>input2,<sp/>error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587" refid="_s_i_scalar_8h_1a0b1bc4c9406666f375e344859e9fb491" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarRaiseToAPowerWithoutReducingUnit(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>power,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>SIUnitByRaisingToAPowerWithoutReducing(theScalar-&gt;unit,<sp/>power,<sp/>&amp;unit_multiplier,<sp/>error);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(unit,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;unit<sp/>=<sp/>unit;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>pow(theScalar-&gt;value.floatValue,power)*unit_multiplier;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>pow(theScalar-&gt;value.doubleValue,power)*unit_multiplier;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>cpow(theScalar-&gt;value.floatComplexValue,power)*unit_multiplier;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>cpow(theScalar-&gt;value.doubleComplexValue,power)*unit_multiplier;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617" refid="_s_i_scalar_8h_1a325f89b6d438e8ba3c4e94abf9f6026d" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByRaisingToAPowerWithoutReducingUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>power,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarRaiseToAPowerWithoutReducingUnit((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>power,<sp/>error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628" refid="_s_i_scalar_8h_1aad38100b32c7aa4fa64e37275a05ee59" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarRaiseToAPower(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>power,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rules<sp/>for<sp/>multiplication<sp/>and<sp/>division:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>-<sp/>returned<sp/>SIScalar<sp/>with<sp/>have<sp/>whichever<sp/>elementType<sp/>is<sp/>greatest<sp/>of<sp/>two<sp/>method<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>-<sp/>returned<sp/>SIScalar<sp/>unit<sp/>will<sp/>be<sp/>in<sp/>coherent<sp/>SI<sp/>units</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>SIUnitByRaisingToAPower(theScalar-&gt;unit,<sp/>power,<sp/>&amp;unit_multiplier,<sp/>error);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;unit<sp/>=<sp/>unit;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>pow(theScalar-&gt;value.floatValue,power)*unit_multiplier;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>pow(theScalar-&gt;value.doubleValue,power)*unit_multiplier;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>cpow(theScalar-&gt;value.floatComplexValue,power)*unit_multiplier;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>cpow(theScalar-&gt;value.doubleComplexValue,power)*unit_multiplier;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661" refid="_s_i_scalar_8h_1a2eec1e13d0a6d0d53760ef6472bd11d9" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByRaisingToAPower(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>power,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1662"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarRaiseToAPower((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>power,<sp/>error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671" refid="_s_i_scalar_8h_1aac11e962df7fb17aa14ba7caf7668185" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarTakeAbsoluteValue(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>fabsf(theScalar-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>fabs(theScalar-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>cabsf(theScalar-&gt;value.floatComplexValue);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>cabs(theScalar-&gt;value.doubleComplexValue);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693" refid="_s_i_scalar_8h_1aa89d55a244d3c180427f58774dda6cc7" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByTakingAbsoluteValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1694"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarTakeAbsoluteValue((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703" refid="_s_i_scalar_8h_1a74576e95b0c04077b9c5f46ddf31d684" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByGammaFunctionWithoutReducingUnit(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarIsComplex(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Gamma<sp/>function<sp/>of<sp/>complex<sp/>number<sp/>not<sp/>implemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIUnitIsDimensionless(theScalar-&gt;unit))<sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>temp<sp/>=<sp/>SIScalarCreateMutableCopy(theScalar);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIScalarReduceUnit(temp);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>argument<sp/>=<sp/>SIScalarDoubleValue(temp)+1;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>tgamma(argument);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(temp);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreate(SIUnitDimensionlessAndUnderived(),<sp/>kOCNumberFloat64Type,<sp/>&amp;result);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarIsRealNonNegativeInteger(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>integerValue<sp/>=<sp/>(int64_t)<sp/>SIScalarDoubleValue(theScalar);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_multiplier<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>newUnit<sp/>=<sp/>SIUnitByRaisingToAPower(theScalar-&gt;unit,<sp/>integerValue,<sp/>&amp;unit_multiplier,<sp/>error);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>argument<sp/>=<sp/>SIScalarDoubleValue(theScalar)+1;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>tgamma(argument);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SIScalarCreate(newUnit,<sp/>kOCNumberFloat64Type,<sp/>&amp;result);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732" refid="_s_i_scalar_8h_1ab73c0766cd0fbd00f0a8db08ca65d878" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarMultiplyByDimensionlessRealConstant(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>constant)</highlight></codeline>
<codeline lineno="1733"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>*=<sp/>constant;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>*=<sp/>constant;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>*=<sp/>constant;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>*=<sp/>constant;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752" refid="_s_i_scalar_8h_1a1d47a6ec624ebf9f6aa9c1b725ae9467" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByMultiplyingByDimensionlessRealConstant(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>constant)</highlight></codeline>
<codeline lineno="1753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>numberType<sp/>elementType<sp/>=<sp/>kOCNumberFloat64Type;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(elementType&lt;theScalar-&gt;type)<sp/>elementType<sp/>=<sp/>theScalar-&gt;type;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateByConvertingToNumberType(theScalar,<sp/>elementType);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarMultiplyByDimensionlessRealConstant((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>constant))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763" refid="_s_i_scalar_8h_1a4f64b199974397daed9f9077f13faec5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarMultiplyByDimensionlessComplexConstant(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>constant)</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SIScalar<sp/>elementType<sp/>remains<sp/>the<sp/>same<sp/>after<sp/>multiplication,<sp/>so<sp/>information<sp/>is<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>theScalar-&gt;value.floatValue<sp/>*<sp/>constant;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>theScalar-&gt;value.doubleValue<sp/>*<sp/>constant;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>theScalar-&gt;value.floatComplexValue<sp/>*<sp/>constant;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>theScalar-&gt;value.doubleComplexValue<sp/>*<sp/>constant;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784" refid="_s_i_scalar_8h_1ab21479f3800a5f8987efe8cd9f8e6e35" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByMultiplyingByDimensionlessComplexConstant(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>constant)</highlight></codeline>
<codeline lineno="1785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateByConvertingToNumberType(theScalar,<sp/>kOCNumberFloat64ComplexType);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarMultiplyByDimensionlessComplexConstant((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>constant))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793" refid="_s_i_scalar_8h_1a8a4239f31de8e502c21b90874e8f026d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarConjugate(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="1794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>kOCNumberSInt32Type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>kOCNumberSInt64Type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>creal(theScalar-&gt;value.floatComplexValue)<sp/>-<sp/>I*cimag(theScalar-&gt;value.floatComplexValue);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>creal(theScalar-&gt;value.doubleComplexValue)<sp/>-<sp/>I*cimag(theScalar-&gt;value.doubleComplexValue);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813" refid="_s_i_scalar_8h_1ad525807959f529cf2e377144a9c6bee0" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByConjugation(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="1814"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarConjugate((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822" refid="_s_i_scalar_8h_1a6698d80aeea7be6c019e29ab990489da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarTakeNthRoot(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/>uint8_t<sp/>root,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1823"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>multiplier<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>newUnit<sp/>=<sp/>SIUnitByTakingNthRoot(theScalar-&gt;unit,<sp/>root,<sp/>&amp;multiplier,<sp/>error);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>theScalar-&gt;unit<sp/>=<sp/>newUnit;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(root==2)<sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>sqrtf(theScalar-&gt;value.floatValue)*multiplier;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>pow(theScalar-&gt;value.floatValue,1./root)*multiplier;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(root==2)<sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>sqrt(theScalar-&gt;value.doubleValue)*multiplier;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>pow(theScalar-&gt;value.doubleValue,1./root)*multiplier;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(root==2)<sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>csqrtf(theScalar-&gt;value.floatComplexValue)*multiplier;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>cpow(theScalar-&gt;value.floatComplexValue,1./root)*multiplier;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(root==2)<sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>csqrt(theScalar-&gt;value.doubleComplexValue)*multiplier;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>cpow(theScalar-&gt;value.doubleComplexValue,1./root)*multiplier;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854" refid="_s_i_scalar_8h_1a2454cac46d96483479031f31e7c85b1d" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByTakingNthRoot(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>uint8_t<sp/>root,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1855"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarTakeNthRoot((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>root,<sp/>error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result)<sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865" refid="_s_i_scalar_8h_1ada2d52caaaf6fb58818c359a7a542ad7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarTakeLog10(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="1866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group___s_i_dimensionality_1gad652c4912d23f176ce8a40c11bc807bb" kindref="member">SIDimensionalityIsDimensionless</ref>(SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar)))<sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;Log10<sp/>requires<sp/>dimensionless<sp/>unit.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>log10f(theScalar-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>log10(theScalar-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>clogf(theScalar-&gt;value.floatComplexValue)/logf(10);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>clog(theScalar-&gt;value.doubleComplexValue)/log(10);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895" refid="_s_i_scalar_8h_1afe1f8d80b837b328b4145ddce02e4c2f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarZeroPart(<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528" kindref="member">complexPart</ref><sp/>part)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528af1cd678e8ab634f3088f20c5fadb572e" kindref="member">kSIRealPart</ref><sp/>||<sp/>part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528ab6a1f5970ae3e770c5c1336ff7580f2e" kindref="member">kSIMagnitudePart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a267d6b1901571f5e9371c1888360bc77" kindref="member">kSIImaginaryPart</ref><sp/>||<sp/>part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a2a2103627466109bc19992cc4fe87b95" kindref="member">kSIArgumentPart</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528af1cd678e8ab634f3088f20c5fadb572e" kindref="member">kSIRealPart</ref><sp/>||<sp/>part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528ab6a1f5970ae3e770c5c1336ff7580f2e" kindref="member">kSIMagnitudePart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a267d6b1901571f5e9371c1888360bc77" kindref="member">kSIImaginaryPart</ref><sp/>||<sp/>part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a2a2103627466109bc19992cc4fe87b95" kindref="member">kSIArgumentPart</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528ab6a1f5970ae3e770c5c1336ff7580f2e" kindref="member">kSIMagnitudePart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528af1cd678e8ab634f3088f20c5fadb572e" kindref="member">kSIRealPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>cimag(theScalar-&gt;value.floatComplexValue);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a267d6b1901571f5e9371c1888360bc77" kindref="member">kSIImaginaryPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>creal(theScalar-&gt;value.floatComplexValue);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a2a2103627466109bc19992cc4fe87b95" kindref="member">kSIArgumentPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.floatComplexValue<sp/>=<sp/>cabs(theScalar-&gt;value.floatComplexValue);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528ab6a1f5970ae3e770c5c1336ff7580f2e" kindref="member">kSIMagnitudePart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528af1cd678e8ab634f3088f20c5fadb572e" kindref="member">kSIRealPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>cimag(theScalar-&gt;value.doubleComplexValue);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a267d6b1901571f5e9371c1888360bc77" kindref="member">kSIImaginaryPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>creal(theScalar-&gt;value.doubleComplexValue);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(part<sp/>==<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528a2a2103627466109bc19992cc4fe87b95" kindref="member">kSIArgumentPart</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theScalar-&gt;value.doubleComplexValue<sp/>=<sp/>cabs(theScalar-&gt;value.doubleComplexValue);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955" refid="_s_i_scalar_8h_1a833180590058cdec360e3f19e185d772" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateByZeroingPart(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528" kindref="member">complexPart</ref><sp/>part)</highlight></codeline>
<codeline lineno="1956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>result<sp/>=<sp/>SIScalarCreateCopy(theScalar);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarZeroPart((<ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref>)<sp/>result,<sp/>part))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(result);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964" refid="_s_i_scalar_8h_1aa2e50aa931bd4fbf0082e61179077e75" refkind="member"><highlight class="normal"><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>SIScalarCreateWithStringContainingSingleUnitFromLibrary(OCStringRef<sp/>theString)</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/><sp/>mutString<sp/>=<sp/>OCStringCreateMutableCopy<sp/>(theString);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;×&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;÷&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;−&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;μ&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;µ&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;γ&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;𝛾&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;º&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;°&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;ɣ&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;𝛾&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutString,STR(</highlight><highlight class="stringliteral">&quot;)(&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;)*(&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRange<sp/>plusRange<sp/>=<sp/>OCStringFind(mutString,<sp/>STR(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plusRange.location<sp/>!=<sp/>kOCNotFound<sp/>&amp;&amp;<sp/>plusRange.location!=0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRange<sp/>minusRange<sp/>=<sp/>OCStringFind(mutString,<sp/>STR(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(minusRange.location<sp/>!=<sp/>kOCNotFound<sp/>&amp;&amp;<sp/>minusRange.location!=0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringTrimMatchingParentheses(mutString);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>length<sp/>=<sp/>OCStringGetLength(mutString);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>how<sp/>many<sp/>unit<sp/>symbols<sp/>are<sp/>in<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>ones<sp/>that<sp/>are<sp/>found,<sp/>save<sp/>their<sp/>values,<sp/>range,<sp/>and<sp/>determine<sp/>the<sp/>largest<sp/>length<sp/>symbol<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableArrayRef<sp/>unitsFound<sp/>=<sp/>OCArrayCreateMutable(0,&amp;kOCTypeArrayCallBacks);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableArrayRef<sp/>ranges<sp/>=<sp/>OCArrayCreateMutable(0,&amp;kOCTypeArrayCallBacks);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>maximumLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRange<sp/>fullRange<sp/>=<sp/>OCRangeMake(0,<sp/>length);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>OCDictionaryRef<sp/>unitsLibrary<sp/>=<sp/>SIUnitGetLibrary();</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unitsLibrary<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>OCArrayRef<sp/>keys<sp/>=<sp/>OCDictionaryCreateArrayWithAllKeys(unitsLibrary);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>index=0;index&lt;OCArrayGetCount(keys);<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>symbol<sp/>=<sp/>OCArrayGetValueAtIndex(keys,<sp/>index);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>mutSymbol<sp/>=<sp/>OCStringCreateMutableCopy(symbol);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutSymbol,STR(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayRef<sp/>findResults<sp/>=<sp/>OCStringCreateArrayWithFindResults<sp/>(mutString,</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutSymbol,</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fullRange,</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutSymbol);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(findResults)<sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>foundIndex=0;<sp/>foundIndex&lt;OCArrayGetCount(findResults);foundIndex++)<sp/>{</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*foundRange<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(findResults,<sp/>foundIndex);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(OCRange));</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rangeFound-&gt;location<sp/>=<sp/>foundRange-&gt;location;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rangeFound-&gt;length<sp/>=<sp/>foundRange-&gt;length;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(ranges,<sp/>rangeFound);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(unitsFound,<sp/>symbol);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>length<sp/>=<sp/>OCStringGetLength(symbol);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(length&gt;maximumLength)<sp/>maximumLength<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(findResults);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(keys);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>unitsFoundCount<sp/>=<sp/>OCArrayGetCount(unitsFound);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unitsFoundCount==0)<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>unit<sp/>symbols<sp/>found.<sp/><sp/>Which<sp/>one<sp/>and<sp/>how<sp/>many<sp/>are<sp/>the<sp/>largest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>largestSymbols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>largestSymbolIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>index=0;<sp/>index&lt;unitsFoundCount;<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCStringGetLength(OCArrayGetValueAtIndex(unitsFound,<sp/>index))<sp/>==<sp/>maximumLength)<sp/>{</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>largestSymbols++;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>largestSymbolIndex<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>More<sp/>than<sp/>one<sp/>unit<sp/>symbol<sp/>of<sp/>the<sp/>same<sp/>length<sp/>-&gt;<sp/>abort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(largestSymbols&gt;1)<sp/>{</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRange<sp/>*largestSymbolRange<sp/><sp/>=<sp/><sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>largestSymbolIndex);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringRef<sp/>largestSymbol<sp/>=<sp/>OCArrayGetValueAtIndex(unitsFound,<sp/>largestSymbolIndex);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Still<sp/>need<sp/>to<sp/>make<sp/>sure<sp/>unitsFoundCount<sp/>is<sp/>correct;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Units<sp/>inside<sp/>the<sp/>largest<sp/>unit<sp/>can<sp/>be<sp/>safely<sp/>ignored<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>this<sp/>method<sp/>to<sp/>work<sp/>other<sp/>units<sp/>can&apos;t<sp/>be<sp/>outside<sp/>the<sp/>largest<sp/>unit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>units<sp/>are<sp/>outside,<sp/>then<sp/>game<sp/>over<sp/>and<sp/>we<sp/>return<sp/>null;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>units<sp/>are<sp/>inside<sp/>largest<sp/>symbol,<sp/>then<sp/>remove<sp/>them<sp/>from<sp/>unitsFound<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int64_t<sp/>index=unitsFoundCount-1;<sp/>index&gt;=0;<sp/>index--)<sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>!=<sp/>largestSymbolIndex)<sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//All<sp/>the<sp/>smaller<sp/>symbols<sp/>must<sp/>be<sp/>present<sp/>in<sp/>the<sp/>larger<sp/>length<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>smallerSymbol<sp/>=<sp/>OCArrayGetValueAtIndex(unitsFound,<sp/>index);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>range<sp/>=<sp/>OCStringFind(largestSymbol,<sp/>smallerSymbol,<sp/>0);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(range.location<sp/>==<sp/>kOCNotFound)<sp/>{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>OCArrayRemoveValueAtIndex(unitsFound,<sp/>index);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>index);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound-&gt;location<sp/>&lt;largestSymbolRange-&gt;location)<sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound-&gt;location<sp/>&gt;largestSymbolRange-&gt;location+largestSymbolRange-&gt;length-1)<sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>unitsFoundCount<sp/>=<sp/>OCArrayGetCount(unitsFound);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>none,<sp/>then<sp/>return<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unitsFoundCount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>one,<sp/>then<sp/>try<sp/>to<sp/>construct<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unitsFoundCount<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unit<sp/>should<sp/>not<sp/>be<sp/>followed<sp/>by<sp/>anything<sp/>except<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>mutLargestSymbol<sp/>=<sp/>OCStringCreateMutableCopy(largestSymbol);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutLargestSymbol,STR(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>range<sp/>=<sp/>OCStringFind(mutString,<sp/>mutLargestSymbol,<sp/>0);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>index<sp/>=<sp/>range.location+range.length;<sp/>index&lt;length;<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>character<sp/>=<sp/>OCStringGetCharacterAtIndex(mutString,<sp/>index);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(character<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutLargestSymbol);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>string<sp/>with<sp/>unit<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>numericPart<sp/>=<sp/>OCStringCreateMutableCopy(mutString);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringFindAndReplace2(numericPart,<sp/>mutLargestSymbol,<sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>numericValue<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCStringGetLength(numericPart)!=0)<sp/>numericValue<sp/>=<sp/>OCStringGetDoubleComplexValue(numericPart);</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isnan(numericValue))<sp/>{</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Abort!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutLargestSymbol);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(numericPart);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>SIUnitForUnderivedSymbol(largestSymbol);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>scalar<sp/>=<sp/>SIScalarCreateWithDoubleComplex(numericValue,<sp/>unit);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numericPart)<sp/>OCRelease(numericPart);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutLargestSymbol);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>0);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarIsReal(scalar))<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>realResult<sp/>=<sp/>SIScalarCreateByTakingComplexPart(scalar,<ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528af1cd678e8ab634f3088f20c5fadb572e" kindref="member">kSIRealPart</ref>);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(scalar);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realResult;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scalar;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>here,<sp/>then<sp/>we<sp/>have<sp/>a<sp/>single<sp/>derived<sp/>unit<sp/>symbol<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string<sp/>and<sp/>should<sp/>be<sp/>able<sp/>to<sp/>create<sp/>a<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unit<sp/>should<sp/>not<sp/>be<sp/>followed<sp/>by<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(largestSymbolRange-&gt;location+largestSymbolRange-&gt;length<sp/>!=<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>string<sp/>with<sp/>unit<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>mutLargestSymbol<sp/>=<sp/>OCStringCreateMutableCopy(largestSymbol);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2<sp/>(mutLargestSymbol,STR(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">),<sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>numericPart<sp/>=<sp/>OCStringCreateMutableCopy(<sp/>mutString);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringFindAndReplace2(numericPart,<sp/>mutLargestSymbol,<sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>numericValue<sp/>=<sp/>OCStringGetDoubleComplexValue(numericPart);</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>SIUnitForUnderivedSymbol(largestSymbol);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>scalar<sp/>=<sp/>SIScalarCreateWithDoubleComplex(numericValue,<sp/>unit);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numericPart)<sp/>OCRelease(numericPart);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(mutLargestSymbol);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(unitsFound);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;i&lt;OCArrayGetCount(ranges);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRange<sp/>*rangeFound<sp/>=<sp/>(OCRange<sp/>*)<sp/>OCArrayGetValueAtIndex(ranges,<sp/>i);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rangeFound)<sp/>free(rangeFound);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(ranges);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarIsReal(scalar))<sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>realResult<sp/>=<sp/>SIScalarCreateByTakingComplexPart(scalar,<ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528af1cd678e8ab634f3088f20c5fadb572e" kindref="member">kSIRealPart</ref>);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(scalar);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realResult;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(mutString);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scalar;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>OCStringRef<sp/>SIScalarCreateStringValueSplitByUnits(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>OCArrayRef<sp/>units,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doubleCheck,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="2232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theScalar))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPositive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarDoubleValue(theScalar)<sp/>&gt;0.0)<sp/>isPositive<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>stringValue<sp/>=<sp/>OCStringCreateMutable(0);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>scalar<sp/>=<sp/>SIScalarCreateMutableCopy(theScalar);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>count<sp/>=<sp/>OCArrayGetCount(units);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>finalCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>index=0;index&lt;count;<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>OCArrayGetValueAtIndex(units,<sp/>index);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>symbol<sp/>=<sp/>SIUnitCopySymbol(unit);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIScalarConvertToUnit(scalar,<sp/>unit,<sp/>error);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>SIScalarDoubleValue(scalar);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index&lt;count-1)<sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isPositive)<sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>*=<sp/>100.;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>round(value);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>/=<sp/>100.;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>OCDoubleFloor(value);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>*=<sp/>100.;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>round(value);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>/=<sp/>100.;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>OCDoubleCeil(value);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>*=<sp/>100.;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>round(value);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>/=<sp/>100.;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((value<sp/>&gt;<sp/>0.0<sp/>&amp;&amp;<sp/>isPositive)<sp/>||<sp/>(value<sp/>&lt;<sp/>0.0<sp/>&amp;&amp;<sp/>!isPositive))<sp/>{</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>valueString<sp/>=<sp/>OCDoubleComplexCreateStringValue(value,NULL);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalCount++;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCStringGetLength(stringValue)&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isPositive)<sp/>OCStringAppend(stringValue,<sp/>STR(</highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>OCStringAppend(stringValue,<sp/>STR(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(stringValue,<sp/>valueString);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(stringValue,<sp/>STR(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(stringValue,<sp/>symbol);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(valueString);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>scalarInUnit<sp/>=<sp/>SIScalarCreate(unit,<sp/>kOCNumberFloat64Type,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIScalarSubtract(scalar,<sp/>scalarInUnit,<sp/>error);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(scalarInUnit);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(symbol);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCStringGetLength(stringValue)<sp/>==0<sp/>||<sp/>finalCount<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stringValue)<sp/>OCRelease(stringValue);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(scalar)<sp/>OCRelease(scalar);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(scalar)<sp/>OCRelease(scalar);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(doubleCheck)<sp/>{</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>check<sp/>=<sp/><ref refid="_s_i_scalar_8h_1a5d54f1cba04975059e42d78c6fb4b10c" kindref="member">SIScalarCreateWithOCString</ref>(stringValue,<sp/>error);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(check)<sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarCompare(theScalar,<sp/>check)==kOCCompareEqualTo)<sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(check);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringValue;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(stringValue);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringValue;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>OCComparisonResult<sp/>compareOnlyTheStrings(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="2308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/>OCTypeID<sp/>type1<sp/>=<sp/>OCGetTypeID(val1);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/>OCTypeID<sp/>type2<sp/>=<sp/>OCGetTypeID(val2);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>OCTypeID<sp/>stringType<sp/>=<sp/>OCStringGetTypeID();</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type1==type2)<sp/>{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type1<sp/>==<sp/>stringType)<sp/><sp/>{</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OCStringCompare((OCStringRef)<sp/>val1,<sp/>(OCStringRef)<sp/>val2,<sp/>(OCStringCompareFlags)<sp/>context);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kOCCompareLessThan;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal">OCArrayRef<sp/>SIScalarCreateArrayOfConversionQuantitiesScalarsAndStringValues(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>quantity,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="2323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableArrayRef<sp/>result<sp/>=<sp/>OCArrayCreateMutable(0,&amp;kOCTypeArrayCallBacks);</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>fahrenheit<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;°F&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>celsius<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;°C&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(<ref refid="group___s_i_dimensionality_1gade42e49ab05ef82824b272e64759256a" kindref="member">SIDimensionalityForQuantity</ref>(kSIQuantityTemperature,NULL),<sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/><sp/>theScalar)))<sp/>{</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>theUnit<sp/>=<sp/>SIQuantityGetUnit((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theUnit<sp/>==<sp/>fahrenheit)<sp/>{</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>theScalar);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>(SIScalarDoubleComplexValue(theScalar)<sp/>-32)*5./9.;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>scalar<sp/>=<sp/>SIScalarCreate(celsius,<sp/>kOCNumberFloat64ComplexType,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>scalar);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(scalar);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theUnit<sp/>==<sp/>celsius)<sp/>{</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>theScalar);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValue(theScalar)*9./5.<sp/>+<sp/>32;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>scalar<sp/>=<sp/>SIScalarCreate(fahrenheit,<sp/>kOCNumberFloat64ComplexType,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>scalar);</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(scalar);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/>OCArrayRef<sp/>units<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/>OCArrayRef<sp/>quantities<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theScalar)<sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>quantity)<sp/>{</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quantities<sp/>=<sp/><ref refid="group___s_i_dimensionality_1gab2736858c938bb994d134c9cbe93584d" kindref="member">SIDimensionalityCreateArrayOfQuantitiesWithSameReducedDimensionality</ref>(SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar));</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(quantities)<sp/>{</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendArray(result,<sp/>quantities,OCRangeMake(0,<sp/>OCArrayGetCount(quantities)));</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(quantities);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>quantity)<sp/>units<sp/>=<sp/>SIUnitCreateArrayOfConversionUnits(SIQuantityGetUnit((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar));</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>units<sp/>=<sp/>SIUnitCreateArrayOfUnitsForQuantity(quantity);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(units)<sp/>{</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>index<sp/>=<sp/>0;<sp/>index&lt;OCArrayGetCount(units);<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>(<ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref>)<sp/>OCArrayGetValueAtIndex(units,<sp/>index);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unit<sp/>&amp;&amp;<sp/>fahrenheit!=unit<sp/>&amp;&amp;<sp/>celsius<sp/>!=unit)<sp/>{</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>newScalar<sp/>=<sp/>SIScalarCreateByConvertingToUnit(theScalar,<sp/>unit,<sp/>error);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newScalar)<sp/>OCRelease(newScalar);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(units)<sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newScalar)<sp/>{</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIUnitIsCoherentDerivedUnit(unit))<sp/>{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>newScalar);</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>magnitude<sp/>=<sp/>log10(fabs(SIScalarDoubleValue(newScalar)));</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(abs(magnitude)&lt;6)<sp/>{</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>newScalar);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(newScalar);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(<ref refid="group___s_i_dimensionality_1gade42e49ab05ef82824b272e64759256a" kindref="member">SIDimensionalityForQuantity</ref>(kSIQuantityTime,NULL),<sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/><sp/>theScalar))<sp/>&amp;&amp;<sp/>SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit1<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;yr&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit2<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;month&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit3<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;wk&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit4<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit5<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit6<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit7<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>theUnits[7]<sp/>=<sp/>{unit1,unit2,unit3,unit4,<sp/>unit5,<sp/>unit6,<sp/>unit7};</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayRef<sp/>units<sp/>=<sp/>OCArrayCreate((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>theUnits,<sp/>7,&amp;kOCTypeArrayCallBacks);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>stringValue<sp/>=<sp/>SIScalarCreateStringValueSplitByUnits(theScalar,<sp/>units,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stringValue)<sp/>{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>stringValue);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(stringValue);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(<ref refid="group___s_i_dimensionality_1gade42e49ab05ef82824b272e64759256a" kindref="member">SIDimensionalityForQuantity</ref>(kSIQuantityVolume,NULL),<sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/><sp/>theScalar))<sp/>&amp;&amp;<sp/>SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit1<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;gal&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit2<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;qt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit3<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;pt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit4<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;cup&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit5<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;floz&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit6<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;tbsp&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit7<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;tsp&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit8<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;halftsp&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit9<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;quartertsp&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>theUnits[9]<sp/>=<sp/>{unit1,unit2,unit3,unit4,<sp/>unit5,<sp/>unit6,<sp/>unit7,unit8,unit9};</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayRef<sp/>units<sp/>=<sp/>OCArrayCreate((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>theUnits,<sp/>9,&amp;kOCTypeArrayCallBacks);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>stringValue<sp/>=<sp/>SIScalarCreateStringValueSplitByUnits(theScalar,<sp/>units,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stringValue)<sp/>{</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>stringValue);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(stringValue);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(<ref refid="group___s_i_dimensionality_1gade42e49ab05ef82824b272e64759256a" kindref="member">SIDimensionalityForQuantity</ref>(kSIQuantityLength,NULL),<sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/><sp/>theScalar))<sp/>&amp;&amp;<sp/>SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit1<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;mi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit2<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;ft&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit3<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>theUnits[3]<sp/>=<sp/>{unit1,unit2,unit3};</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayRef<sp/>units<sp/>=<sp/>OCArrayCreate((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>theUnits,<sp/>3,&amp;kOCTypeArrayCallBacks);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>stringValue<sp/>=<sp/>SIScalarCreateStringValueSplitByUnits(theScalar,<sp/>units,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stringValue)<sp/>{</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>stringValue);</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(stringValue);</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(<ref refid="group___s_i_dimensionality_1gade42e49ab05ef82824b272e64759256a" kindref="member">SIDimensionalityForQuantity</ref>(kSIQuantityLength,NULL),<sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/><sp/>theScalar))<sp/>&amp;&amp;<sp/>SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit1<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;mi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit2<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;yd&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit3<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;ft&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit4<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>theUnits[4]<sp/>=<sp/>{unit1,unit2,unit3,unit4};</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayRef<sp/>units<sp/>=<sp/>OCArrayCreate((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>theUnits,<sp/>4,&amp;kOCTypeArrayCallBacks);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>stringValue<sp/>=<sp/>SIScalarCreateStringValueSplitByUnits(theScalar,<sp/>units,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stringValue)<sp/>{</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCArrayBSearchValues(result,OCRangeMake(0,<sp/>OCArrayGetCount(result)),stringValue,</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(OCComparatorFunction)compareOnlyTheStrings,NULL)<sp/>&gt;=<sp/>OCArrayGetCount(result)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>stringValue);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(stringValue);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(<ref refid="group___s_i_dimensionality_1gade42e49ab05ef82824b272e64759256a" kindref="member">SIDimensionalityForQuantity</ref>(kSIQuantityMass,NULL),<sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/><sp/>theScalar))<sp/>&amp;&amp;<sp/>SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit1<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;ton&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit2<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;lb&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit3<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;oz&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>theUnits[3]<sp/>=<sp/>{unit1,unit2,unit3};</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayRef<sp/>units<sp/>=<sp/>OCArrayCreate((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>theUnits,<sp/>3,&amp;kOCTypeArrayCallBacks);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>stringValue<sp/>=<sp/>SIScalarCreateStringValueSplitByUnits(theScalar,<sp/>units,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stringValue)<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>stringValue);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(stringValue);</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(<ref refid="group___s_i_dimensionality_1gade42e49ab05ef82824b272e64759256a" kindref="member">SIDimensionalityForQuantity</ref>(kSIQuantityMass,NULL),<sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/><sp/>theScalar))<sp/>&amp;&amp;<sp/>SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit1<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;ton&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit2<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;st&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit3<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;lb&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit4<sp/>=<sp/>SIUnitForUnderivedSymbol(STR(</highlight><highlight class="stringliteral">&quot;oz&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>theUnits[4]<sp/>=<sp/>{unit1,unit2,unit3,unit4};</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayRef<sp/>units<sp/>=<sp/>OCArrayCreate((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>theUnits,<sp/>4,&amp;kOCTypeArrayCallBacks);</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>stringValue<sp/>=<sp/>SIScalarCreateStringValueSplitByUnits(theScalar,<sp/>units,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stringValue)<sp/>{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCArrayBSearchValues(result,OCRangeMake(0,<sp/>OCArrayGetCount(result)),stringValue,</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(OCComparatorFunction)compareOnlyTheStrings,NULL)&gt;=OCArrayGetCount(result)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendValue(result,<sp/>stringValue);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(stringValue);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal">OCArrayRef<sp/>SIScalarCreateArrayOfConversionQuantitiesAndUnits(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>quantity,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="2496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/>OCArrayRef<sp/>units<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>OCArrayRef<sp/>quantities<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/>OCMutableArrayRef<sp/>result<sp/>=<sp/>OCArrayCreateMutable(0,&amp;kOCTypeArrayCallBacks);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theScalar)<sp/>{</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>quantity)<sp/>{</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quantities<sp/>=<sp/><ref refid="group___s_i_dimensionality_1gab2736858c938bb994d134c9cbe93584d" kindref="member">SIDimensionalityCreateArrayOfQuantitiesWithSameReducedDimensionality</ref>(SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar));</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(quantities)<sp/>{</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCArrayAppendArray(result,<sp/>quantities,OCRangeMake(0,<sp/>OCArrayGetCount(quantities)));</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(quantities);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL<sp/>==<sp/>quantity)<sp/>units<sp/>=<sp/>SIUnitCreateArrayOfConversionUnits(SIQuantityGetUnit((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar));</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>units<sp/>=<sp/>SIUnitCreateArrayOfUnitsForQuantity(quantity);</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(units)<sp/>{</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>index<sp/>=<sp/>0;<sp/>index&lt;OCArrayGetCount(units);<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref><sp/>unit<sp/>=<sp/>(<ref refid="_s_i_unit_8h_1a1cf4e530a7af3dc4ef3c5bf3144e0652" kindref="member">SIUnitRef</ref>)<sp/>OCArrayGetValueAtIndex(units,<sp/>index);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(unit)<sp/>{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>newScalar<sp/>=<sp/>SIScalarCreateByConvertingToUnit(theScalar,<sp/>unit,<sp/>error);</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>{</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/>{</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newScalar)<sp/>OCRelease(newScalar);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(units)<sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newScalar)<sp/>{</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIUnitIsCoherentDerivedUnit(unit))<sp/>OCArrayAppendValue(result,<sp/>unit);</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>magnitude<sp/>=<sp/>log10(fabs(SIScalarDoubleValue(newScalar)));</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(abs(magnitude)&lt;6)OCArrayAppendValue(result,<sp/>unit);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(newScalar);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(units);</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>Strings<sp/>and<sp/>Archiving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight></codeline>
<codeline lineno="2545" refid="_s_i_scalar_8h_1a2a34dd5cb7346f5c67781f92c9770898" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SIScalarShow(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="2546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,);</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringRef<sp/>cf_string<sp/>=<sp/>SIScalarCreateStringValue(theScalar);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cf_string)<sp/>{</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringShow(cf_string);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringShow(STR(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(cf_string);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>fprintf(stdout,</highlight><highlight class="stringliteral">&quot;invalid<sp/>value.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557" refid="_s_i_scalar_8h_1adb14dd9e28cd1cda832d64f53eb2033c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarValidateProposedStringValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,OCStringRef<sp/>proposedStringValue,<sp/>OCStringRef<sp/>*error)</highlight></codeline>
<codeline lineno="2558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(proposedStringValue,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>proposedValue<sp/>=<sp/><ref refid="_s_i_scalar_8h_1a5d54f1cba04975059e42d78c6fb4b10c" kindref="member">SIScalarCreateWithOCString</ref>(proposedStringValue,error);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(proposedValue==NULL)<sp/>{</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_i_dimensionality_1ga94c2d8ce9b424f5110e01ac8f3479586" kindref="member">SIDimensionalityRef</ref><sp/>dimensionality<sp/>=<sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar);</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>dimensionalitySymbol<sp/>=<sp/><ref refid="group___s_i_dimensionality_1gaf8467c4a5b37e321daaf27a8aadabf78" kindref="member">SIDimensionalityGetSymbol</ref>(dimensionality);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>OCStringCreateWithFormat(STR(</highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>input.<sp/>Value<sp/>must<sp/>have<sp/>dimensionality:<sp/>%@&quot;</highlight><highlight class="normal">),dimensionalitySymbol);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIQuantityHasSameReducedDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>proposedValue,<sp/>(<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(error)<sp/>{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___s_i_dimensionality_1ga94c2d8ce9b424f5110e01ac8f3479586" kindref="member">SIDimensionalityRef</ref><sp/>dimensionality<sp/>=<sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar);</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>dimensionalitySymbol<sp/>=<sp/><ref refid="group___s_i_dimensionality_1gaf8467c4a5b37e321daaf27a8aadabf78" kindref="member">SIDimensionalityGetSymbol</ref>(dimensionality);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error<sp/>=<sp/>OCStringCreateWithFormat(STR(</highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>input.<sp/>Value<sp/>must<sp/>have<sp/>dimensionality:<sp/>%@&quot;</highlight><highlight class="normal">),dimensionalitySymbol);</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583" refid="_s_i_scalar_8h_1affca2a0f2c0796fa9c9c9aaaccf55e80" refkind="member"><highlight class="normal">OCStringRef<sp/>SIScalarCreateNumericStringValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="2584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theScalar==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringRef<sp/>stringValue<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringValue<sp/>=<sp/>SIScalarCreateNumericStringValueWithFormat(theScalar,<sp/>STR(</highlight><highlight class="stringliteral">&quot;%.7g&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringValue<sp/>=<sp/>SIScalarCreateNumericStringValueWithFormat(theScalar,<sp/>STR(&quot;%.16lg&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringValue<sp/>=<sp/>SIScalarCreateNumericStringValueWithFormat(theScalar,<sp/>STR(</highlight><highlight class="stringliteral">&quot;%.14lg&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringValue;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602" refid="_s_i_scalar_8h_1a13d59fede000af553c063ed16d691d04" refkind="member"><highlight class="normal">OCStringRef<sp/>SIScalarCreateStringValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="2603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringRef<sp/>stringValue<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theScalar==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringValue;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCGetTypeID(theScalar)==OCNumberGetTypeID())<sp/>{</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OCNumberCreateStringValue((OCNumberRef)<sp/>((OCTypeRef)<sp/>theScalar));</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringValue<sp/>=<sp/>SIScalarCreateStringValueWithFormat(theScalar,<sp/>STR(</highlight><highlight class="stringliteral">&quot;%.7g&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringValue<sp/>=<sp/>SIScalarCreateStringValueWithFormat(theScalar,<sp/>STR(</highlight><highlight class="stringliteral">&quot;%.16lg&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringValue;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight></codeline>
<codeline lineno="2623" refid="_s_i_scalar_8h_1ae30b1f110e453f8c77e776a7436f69a0" refkind="member"><highlight class="normal">OCStringRef<sp/>SIScalarCreateStringValueForPart(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_quantity_8h_1a5983127ddf9bb6c2e0569779bb8f5528" kindref="member">complexPart</ref><sp/>thePart)</highlight></codeline>
<codeline lineno="2624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,NULL);</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>temp<sp/>=<sp/>SIScalarCreateByTakingComplexPart(theScalar,<sp/>thePart);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringRef<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/>SIScalarCreateStringValue(temp);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(temp);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string;</highlight></codeline>
<codeline lineno="2630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight></codeline>
<codeline lineno="2632" refid="_s_i_scalar_8h_1a7a2723bef925a3c95053bb603182d669" refkind="member"><highlight class="normal">OCStringRef<sp/>SIScalarCreateNumericStringValueWithFormat(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>format)</highlight></codeline>
<codeline lineno="2633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theScalar==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>SIScalarFloatValue(theScalar);</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCCompareFloatValues(value,<sp/>0.0)<sp/>==<sp/>kOCCompareEqualTo)<sp/>value<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>numericString<sp/>=<sp/>OCFloatCreateStringValue(value);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numericString;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>SIScalarDoubleValue(theScalar);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCCompareDoubleValues(value,<sp/>0.0)<sp/>==<sp/>kOCCompareEqualTo)<sp/>value<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>numericString<sp/>=<sp/>OCDoubleComplexCreateStringValue(value,format);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numericString;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarFloatComplexValue(theScalar);</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>cf_string<sp/>=<sp/>OCStringCreateMutable(0);</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(crealf(value)!=0.0<sp/>&amp;&amp;<sp/>cimagf(value)!=0.0)<sp/>OCStringAppend(cf_string,<sp/>STR(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>numericString<sp/>=<sp/>OCFloatComplexCreateStringValue(value,format);</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,numericString);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(numericString);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(crealf(value)!=0.0<sp/>&amp;&amp;<sp/>cimagf(value)!=0.0)<sp/>OCStringAppend(cf_string,<sp/>STR(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cf_string;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValue(theScalar);</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>cf_string<sp/>=<sp/>OCStringCreateMutable(0);</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(creal(value)!=0.0<sp/>&amp;&amp;<sp/>cimag(value)!=0.0)<sp/>OCStringAppend(cf_string,<sp/>STR(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>numericString<sp/>=<sp/>OCDoubleComplexCreateStringValue(value,format);</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,numericString);</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(numericString);</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(creal(value)!=0.0<sp/>&amp;&amp;<sp/>cimag(value)!=0.0)<sp/>OCStringAppend(cf_string,<sp/>STR(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cf_string;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight></codeline>
<codeline lineno="2676" refid="_s_i_scalar_8h_1a1171ae9900d4eb072b3c3177ad99869a" refkind="member"><highlight class="normal">OCStringRef<sp/>SIScalarCreateUnitString(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="2677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringRef<sp/>unit_symbol;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIUnitIsDimensionlessAndUnderived(theScalar-&gt;unit))<sp/>unit_symbol<sp/>=<sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>unit_symbol<sp/>=<sp/>SIUnitCopySymbol(theScalar-&gt;unit);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unit_symbol;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight></codeline>
<codeline lineno="2684" refid="_s_i_scalar_8h_1a3e3321d48da28c9f91db264a78ce18cd" refkind="member"><highlight class="normal">OCStringRef<sp/>SIScalarCreateStringValueWithFormat(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>OCStringRef<sp/>format)</highlight></codeline>
<codeline lineno="2685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theScalar==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STR(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringRef<sp/>unit_symbol<sp/>=<sp/>SIScalarCreateUnitString(theScalar);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>SIScalarFloatValue(theScalar);</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCCompareFloatValues(value,<sp/>0.0)<sp/>==<sp/>kOCCompareEqualTo)<sp/>value<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>numericString<sp/>=<sp/>OCFloatCreateStringValue(value);</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>cf_string<sp/>=<sp/>OCStringCreateMutableCopy(numericString);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(numericString);</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theScalar-&gt;unit)<sp/>{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,STR(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,<sp/>unit_symbol);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringTrimWhitespace<sp/>(cf_string);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unit_symbol);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cf_string;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>SIScalarDoubleValue(theScalar);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(OCCompareDoubleValues(value,<sp/>0.0)<sp/>==<sp/>kOCCompareEqualTo)<sp/>value<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>numericString<sp/>=<sp/>OCDoubleCreateStringValue(value);</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>cf_string<sp/>=<sp/>OCStringCreateMutableCopy(numericString);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(numericString);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theScalar-&gt;unit)<sp/>{</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,STR(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,<sp/>unit_symbol);</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringTrimWhitespace<sp/>(cf_string);</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unit_symbol);</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cf_string;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarFloatComplexValue(theScalar);</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>cf_string<sp/>=<sp/>OCStringCreateMutable(0);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(crealf(value)!=0.0<sp/>&amp;&amp;<sp/>cimagf(value)!=0.0)<sp/>OCStringAppend(cf_string,<sp/>STR(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>numericString<sp/>=<sp/>OCFloatComplexCreateStringValue(value,format);</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,numericString);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(numericString);</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(crealf(value)!=0.0<sp/>&amp;&amp;<sp/>cimagf(value)!=0.0)<sp/>OCStringAppend(cf_string,<sp/>STR(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theScalar-&gt;unit)<sp/>{</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,STR(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,<sp/>unit_symbol);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringTrimWhitespace<sp/>(cf_string);</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unit_symbol);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cf_string;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValue(theScalar);</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCMutableStringRef<sp/>cf_string<sp/>=<sp/>OCStringCreateMutable(0);</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(creal(value)!=0.0<sp/>&amp;&amp;<sp/>cimag(value)!=0.0)<sp/>OCStringAppend(cf_string,<sp/>STR(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringRef<sp/>numericString<sp/>=<sp/>OCDoubleComplexCreateStringValue(value,format);</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,numericString);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(numericString);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(creal(value)!=0.0<sp/>&amp;&amp;<sp/>cimag(value)!=0.0)<sp/>OCStringAppend(cf_string,<sp/>STR(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theScalar-&gt;unit)<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,STR(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringAppend(cf_string,<sp/>unit_symbol);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCStringTrimWhitespace<sp/>(cf_string);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCRelease(unit_symbol);</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cf_string;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight></codeline>
<codeline lineno="2760" refid="_s_i_scalar_8h_1a02f00b56378b057972c26e8ea821b2a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SIScalarAddToArrayAsStringValue(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/>OCMutableArrayRef<sp/>array)</highlight></codeline>
<codeline lineno="2761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,);</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(array,);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/>OCStringRef<sp/>stringValue<sp/>=<sp/>SIScalarCreateStringValue(theScalar);</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/>OCArrayAppendValue(array,<sp/>stringValue);</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(stringValue);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771" refid="_s_i_scalar_8h_1a91df1367c29fbf1e4fefd17fe319f201" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarIsReal(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="2772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValue(theScalar);</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cimag(value)==0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779" refid="_s_i_scalar_8h_1ac7808439acd27c23c80f1ad58b6a8ae3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarIsImaginary(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="2780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValue(theScalar);</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(creal(value)==0.0<sp/>&amp;&amp;<sp/>cabs(value)<sp/>!=<sp/>0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787" refid="_s_i_scalar_8h_1a99cf86a454d157cc31ad81ea5112163f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarIsComplex(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="2788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValue(theScalar);</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cimag(value)==0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"></highlight></codeline>
<codeline lineno="2795" refid="_s_i_scalar_8h_1a78cc0116b408eac1226b0c318f1f6de6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarIsZero(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="2796"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>complex<sp/>value<sp/>=<sp/>SIScalarDoubleComplexValue(theScalar);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cimag(value)!=0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(creal(value)!=0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804" refid="_s_i_scalar_8h_1a1b9cffc79ff27fe72e1d56ecae9d0e08" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarIsInfinite(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="2805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(SIQuantityGetElementType((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isinf(theScalar-&gt;value.floatValue))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isinf(theScalar-&gt;value.doubleValue))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isinf(crealf(theScalar-&gt;value.floatComplexValue)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isinf(cimagf(theScalar-&gt;value.floatComplexValue)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isinf(creal(theScalar-&gt;value.floatComplexValue)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isinf(cimag(theScalar-&gt;value.floatComplexValue)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822" refid="_s_i_scalar_8h_1a032a7852c3087bf821021113e4918cf5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarIsRealNonNegativeInteger(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar)</highlight></codeline>
<codeline lineno="2823"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SIScalarIsComplex(theScalar))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>SIScalarDoubleValue(theScalar);</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integerPart;</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fractionalPart<sp/>=<sp/>modf(value,<sp/>&amp;integerPart);</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fractionalPart<sp/>!=<sp/>0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(integerPart&gt;=0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"></highlight></codeline>
<codeline lineno="2834" refid="_s_i_scalar_8h_1a8520d2fe3bb1dfed954a6ee4a37455d5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SIScalarEqual(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input1,<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>input2)</highlight></codeline>
<codeline lineno="2835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input1,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(input2,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input1<sp/>==<sp/>input2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input1-&gt;type<sp/>!=<sp/>input2-&gt;type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIUnitEqual(input1-&gt;unit,<sp/>input2-&gt;unit))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(input1-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input1-&gt;value.floatValue<sp/>!=<sp/>input2-&gt;value.floatValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input1-&gt;value.doubleValue<sp/>!=<sp/>input2-&gt;value.doubleValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input1-&gt;value.floatComplexValue<sp/>!=<sp/>input2-&gt;value.floatComplexValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input1-&gt;value.doubleComplexValue<sp/>!=<sp/>input2-&gt;value.doubleComplexValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight></codeline>
<codeline lineno="2864" refid="_s_i_scalar_8h_1af0ccf17cf50a58678feb583faecb1b8e" refkind="member"><highlight class="normal">OCComparisonResult<sp/>SIScalarCompare(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theOtherScalar)</highlight></codeline>
<codeline lineno="2865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL==theScalar)<sp/>{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,kOCCompareError);</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NULL==theOtherScalar)<sp/>{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theOtherScalar,kOCCompareError);</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group___s_i_dimensionality_1ga271ac435fe756290875d1e8eefe32352" kindref="member">SIDimensionalityHasSameReducedDimensionality</ref>(SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar),</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theOtherScalar)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kOCCompareUnequalDimensionalities;</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theOtherConverted<sp/>=<sp/>SIScalarCreateMutableCopy(theOtherScalar);</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/>SIScalarConvertToUnit(theOtherConverted,<sp/>SIQuantityGetUnit((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar),<sp/>NULL);</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>result<sp/>=<sp/>kOCCompareError;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theOtherConverted-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theOtherConverted))<sp/>{</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theOtherConverted))<sp/>{</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>creal(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theOtherConverted-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareDoubleValues((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleValue,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theOtherConverted))<sp/>{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theOtherConverted))<sp/>{</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareDoubleValues((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleValue,<sp/>creal(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theOtherConverted-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>creal(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>realResult<sp/>=<sp/><sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>imagResult<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimagf(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimagf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(realResult<sp/>==<sp/>kOCCompareEqualTo<sp/>&amp;&amp;<sp/>imagResult<sp/>==<sp/>kOCCompareEqualTo)<sp/>result<sp/>=<sp/>kOCCompareEqualTo;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>realResult<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>creal(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>imagResult<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimagf(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimag(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(realResult<sp/>==<sp/>kOCCompareEqualTo<sp/>&amp;&amp;<sp/>imagResult<sp/>==<sp/>kOCCompareEqualTo)<sp/>result<sp/>=<sp/>kOCCompareEqualTo;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theOtherConverted-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>creal(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareDoubleValues((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>creal(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>realResult<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>creal(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>imagResult<sp/>=<sp/>OCCompareFloatValues((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimag(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimagf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(realResult<sp/>==<sp/>kOCCompareEqualTo<sp/>&amp;&amp;<sp/>imagResult<sp/>==<sp/>kOCCompareEqualTo)<sp/>result<sp/>=<sp/>kOCCompareEqualTo;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>realResult<sp/>=<sp/>OCCompareDoubleValues((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>creal(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>creal(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>imagResult<sp/>=<sp/>OCCompareDoubleValues((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>cimag(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>cimag(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(realResult<sp/>==<sp/>kOCCompareEqualTo<sp/>&amp;&amp;<sp/>imagResult<sp/>==<sp/>kOCCompareEqualTo)<sp/>result<sp/>=<sp/>kOCCompareEqualTo;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(theOtherConverted);</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight></codeline>
<codeline lineno="3022" refid="_s_i_scalar_8h_1aff44cf1ff8c5b5cac231cbf287aec9da" refkind="member"><highlight class="normal">OCComparisonResult<sp/>SIScalarCompareReduced(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theOtherScalar)</highlight></codeline>
<codeline lineno="3023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,kOCCompareError);</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theOtherScalar,kOCCompareError);</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalarReduced<sp/>=<sp/>SIScalarCreateByReducingUnit(theScalar);</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theOtherScalarReduced<sp/>=<sp/>SIScalarCreateByReducingUnit(theOtherScalar);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>result<sp/>=<sp/>SIScalarCompare(theScalarReduced,<sp/>theOtherScalarReduced);</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(theScalarReduced);</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(theOtherScalarReduced);</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight></codeline>
<codeline lineno="3034" refid="_s_i_scalar_8h_1aa27de8bd2878818d18b4b33d5d0e09a6" refkind="member"><highlight class="normal">OCComparisonResult<sp/>SIScalarCompareLoose(<ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theScalar,<sp/><ref refid="_s_i_scalar_8h_1a4221ae12f7f1db415579efd3a1c3cdda" kindref="member">SIScalarRef</ref><sp/>theOtherScalar)</highlight></codeline>
<codeline lineno="3035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theScalar,kOCCompareError);</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/>IF_NO_OBJECT_EXISTS_RETURN(theOtherScalar,kOCCompareError);</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group___s_i_dimensionality_1ga3945c654215dc7cbec5f13bdc3bdbb5a" kindref="member">SIDimensionalityEqual</ref>(SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar),</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIQuantityGetUnitDimensionality((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theOtherScalar)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kOCCompareUnequalDimensionalities;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_s_i_scalar_8h_1ae920fb2cd07c07b91f1fb602a0c04fcf" kindref="member">SIMutableScalarRef</ref><sp/>theOtherConverted<sp/>=<sp/>SIScalarCreateMutableCopy(theOtherScalar);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/>SIScalarConvertToUnit(theOtherConverted,<sp/>SIQuantityGetUnit((<ref refid="_s_i_quantity_8h_1a8c892c252798bedbc27e72c50ab8ae3f" kindref="member">SIQuantityRef</ref>)<sp/>theScalar),<sp/>NULL);</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>result<sp/>=<sp/>kOCCompareError;</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theScalar-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theOtherConverted-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theOtherConverted))<sp/>{</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theOtherConverted))<sp/>{</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.floatValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>creal(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theOtherConverted-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareDoubleValuesLoose((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleValue,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theOtherConverted))<sp/>{</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleValue,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theOtherConverted))<sp/>{</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareDoubleValuesLoose((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theScalar-&gt;value.doubleValue,<sp/>creal(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theOtherConverted-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>creal(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>realResult<sp/>=<sp/><sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>imagResult<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimagf(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimagf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(realResult<sp/>==<sp/>kOCCompareEqualTo<sp/>&amp;&amp;<sp/>imagResult<sp/>==<sp/>kOCCompareEqualTo)<sp/>result<sp/>=<sp/>kOCCompareEqualTo;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>realResult<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>creal(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>imagResult<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimagf(theScalar-&gt;value.floatComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimag(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(realResult<sp/>==<sp/>kOCCompareEqualTo<sp/>&amp;&amp;<sp/>imagResult<sp/>==<sp/>kOCCompareEqualTo)<sp/>result<sp/>=<sp/>kOCCompareEqualTo;</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(theOtherConverted-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32Type:<sp/>{</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>creal(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.floatValue);</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64Type:<sp/>{</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SIScalarIsReal(theScalar))<sp/>{</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>OCCompareDoubleValuesLoose((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>creal(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>theOtherConverted-&gt;value.doubleValue);</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat32ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>realResult<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>creal(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>crealf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>imagResult<sp/>=<sp/>OCCompareFloatValuesLoose((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimag(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>cimagf(theOtherConverted-&gt;value.floatComplexValue));</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(realResult<sp/>==<sp/>kOCCompareEqualTo<sp/>&amp;&amp;<sp/>imagResult<sp/>==<sp/>kOCCompareEqualTo)<sp/>result<sp/>=<sp/>kOCCompareEqualTo;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kOCNumberFloat64ComplexType:<sp/>{</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>realResult<sp/>=<sp/>OCCompareDoubleValuesLoose((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>creal(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>creal(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OCComparisonResult<sp/>imagResult<sp/>=<sp/>OCCompareDoubleValuesLoose((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>cimag(theScalar-&gt;value.doubleComplexValue),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>cimag(theOtherConverted-&gt;value.doubleComplexValue));</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(realResult<sp/>==<sp/>kOCCompareEqualTo<sp/>&amp;&amp;<sp/>imagResult<sp/>==<sp/>kOCCompareEqualTo)<sp/>result<sp/>=<sp/>kOCCompareEqualTo;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>kOCCompareNoSingleValue;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/>OCRelease(theOtherConverted);</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="SIScalar.c"/>
  </compounddef>
</doxygen>
