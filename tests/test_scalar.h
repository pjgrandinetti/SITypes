#ifndef TEST_SCALAR_H
#define TEST_SCALAR_H

// Prototypes for all tests (skip SIScalarCreateWithOCString)
void test_SIScalarGetTypeID(void);
void test_SIScalarCreateCopy(void);
void test_SIScalarCreateMutableCopy(void);
void test_SIScalarCreateWithFloat(void);
void test_SIScalarCreateMutableWithFloat(void);
void test_SIScalarCreateWithDouble(void);
void test_SIScalarCreateMutableWithDouble(void);
void test_SIScalarCreateWithFloatComplex(void);
void test_SIScalarCreateMutableWithFloatComplex(void);
void test_SIScalarCreateWithDoubleComplex(void);
void test_SIScalarCreateMutableWithDoubleComplex(void);
void test_SIScalarCreateWithStringContainingSingleUnitFromLibrary(void);
void test_SIScalarGetValue(void);
void test_SIScalarSetFloatValue(void);
void test_SIScalarSetDoubleValue(void);
void test_SIScalarSetFloatComplexValue(void);
void test_SIScalarSetDoubleComplexValue(void);
void test_SIScalarSetElementType(void);
void test_SIScalarFloatValue(void);
void test_SIScalarDoubleValue(void);
void test_SIScalarFloatComplexValue(void);
void test_SIScalarDoubleComplexValue(void);
void test_SIScalarMagnitudeValue(void);
void test_SIScalarArgumentValue(void);
void test_SIScalarFloatValueInUnit(void);
void test_SIScalarDoubleValueInUnit(void);
void test_SIScalarFloatComplexValueInUnit(void);
void test_SIScalarDoubleComplexValueInUnit(void);
void test_SIScalarFloatValueInCoherentUnit(void);
void test_SIScalarDoubleValueInCoherentUnit(void);
void test_SIScalarFloatComplexValueInCoherentUnit(void);
void test_SIScalarDoubleComplexValueInCoherentUnit(void);
void test_SIScalarCreateByConvertingToNumberType(void);
void test_SIScalarTakeComplexPart(void);
void test_SIScalarCreateByTakingComplexPart(void);
void test_SIScalarCreateByReducingUnit(void);
void test_SIScalarReduceUnit(void);
void test_SIScalarConvertToUnit(void);
void test_SIScalarCreateByConvertingToUnit(void);
void test_SIScalarConvertToCoherentUnit(void);
void test_SIScalarCreateByConvertingToCoherentUnit(void);
void test_SIScalarCreateByAdding(void);
void test_SIScalarAdd(void);
void test_SIScalarCreateBySubtracting(void);
void test_SIScalarSubtract(void);
void test_SIScalarCreateByMultiplyingWithoutReducingUnit(void);
void test_SIScalarMultiplyWithoutReducingUnit(void);
void test_SIScalarCreateByMultiplying(void);
void test_SIScalarMultiply(void);
void test_SIScalarCreateByDividingWithoutReducingUnit(void);
void test_SIScalarDivideWithoutReducingUnit(void);
void test_SIScalarCreateByDividing(void);
void test_SIScalarDivide(void);
void test_SIScalarCreateByRaisingToAPowerWithoutReducingUnit(void);
void test_SIScalarRaiseToAPowerWithoutReducingUnit(void);
void test_SIScalarCreateByRaisingToAPower(void);
void test_SIScalarRaiseToAPower(void);
void test_SIScalarCreateByTakingAbsoluteValue(void);
void test_SIScalarTakeAbsoluteValue(void);
void test_SIScalarCreateByGammaFunctionWithoutReducingUnit(void);
void test_SIScalarCreateByTakingNthRoot(void);
void test_SIScalarTakeNthRoot(void);
void test_SIScalarTakeLog10(void);
void test_SIScalarCreateByZeroingPart(void);
void test_SIScalarZeroPart(void);
void test_SIScalarMultiplyByDimensionlessRealConstant(void);
void test_SIScalarCreateByMultiplyingByDimensionlessRealConstant(void);
void test_SIScalarCreateByMultiplyingByDimensionlessComplexConstant(void);
void test_SIScalarMultiplyByDimensionlessComplexConstant(void);
void test_SIScalarCreateByConjugation(void);
void test_SIScalarConjugate(void);
void test_SIScalarShow(void);
void test_SIScalarCreateStringValue(void);
void test_SIScalarCreateNumericStringValue(void);
void test_SIScalarCreateStringValueForPart(void);
void test_SIScalarCreateUnitString(void);
void test_SIScalarCreateStringValueWithFormat(void);
void test_SIScalarCreateNumericStringValueWithFormat(void);
void test_SIScalarAddToArrayAsStringValue(void);
void test_SIScalarIsReal(void);
void test_SIScalarIsImaginary(void);
void test_SIScalarIsComplex(void);
void test_SIScalarIsZero(void);
void test_SIScalarIsInfinite(void);
void test_SIScalarIsRealNonNegativeInteger(void);
void test_SIScalarValidateProposedStringValue(void);
void test_SIScalarEqual(void);
void test_SIScalarCompare(void);
void test_SIScalarCompareReduced(void);
void test_SIScalarCompareLoose(void);

#endif /* TEST_SCALAR_H */
